<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>matlab|感知器神经网络</title>
      <link href="/2022/01/08/matlab-Ai/"/>
      <url>/2022/01/08/matlab-Ai/</url>
      
        <content type="html"><![CDATA[<h1 id="感知器神经网络"><a href="#感知器神经网络" class="headerlink" title="感知器神经网络"></a>感知器神经网络</h1><blockquote><p>学习材料：<a href="https://www.bilibili.com/video/BV1jk4y1m7mo">https://www.bilibili.com/video/BV1jk4y1m7mo</a></p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>感知器特别适合解决简单的模式分类（pattern classification）问题<br><br>但是单层感知器只能解决线性可分的问题。</p></blockquote><p>是一种最简单形式的前馈式人工神经网络</p><p>是一种二元线性分类器</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clear all;</span><br><span class="line">close all;</span><br><span class="line">P=[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>;<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>];  <span class="comment">%输入向量</span></span><br><span class="line">T=[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>];          <span class="comment">%目标向量</span></span><br><span class="line">net=newp(minmax(P),<span class="number">1</span>,<span class="string">&#x27;hardlim&#x27;</span>,<span class="string">&#x27;learnp&#x27;</span>);</span><br><span class="line">net=train(net,P,T);   <span class="comment">%训练神经网络</span></span><br><span class="line">Y=sim(net,P);</span><br><span class="line">plotpv(P,T);</span><br><span class="line">plotpc(net.iw&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,net.b&#123;<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/.io//1.png" class="lazyload placeholder" data-srcset="/.io//1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输出图片"></p><p>关键点：</p><ol><li>输入两个矩阵</li><li>P有两行(因为是对点进行分类，点的坐标有两个值)</li></ol><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><pre class="mermaid">graph LR    1[输入1]--w1-->4[加权求和]    2[输入2]--w2-->4[加权求和]    3[输入n]--w3-->4[加权求和]    5[输入n]--wn-->4[加权求和]    6[b]--->4[加权求和]    4[加权求和]-->7[传输函数]    7[传输函数]-->8[output]</pre><p>注释：wn是权值，b是偏差，传输函数多为阈值函数</p><h3 id="关于感知器的生成函数"><a href="#关于感知器的生成函数" class="headerlink" title="关于感知器的生成函数"></a>关于感知器的生成函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net = newp(pr,s,tf,lf)</span><br><span class="line"><span class="comment">%net 接收newp的返回值(即一个感知器网络)</span></span><br><span class="line"><span class="comment">%pr  R*2的矩阵，由R维输入向量每维最小值和最大值构成</span></span><br><span class="line"><span class="comment">%s   神经元个数</span></span><br><span class="line"><span class="comment">%tf  传递函数，默认hardlim，此外还可选hardlims</span></span><br><span class="line"><span class="comment">%lf  感知器的学习函数，默认learnp，可选learnpn</span></span><br></pre></td></tr></table></figure><h3 id="关于传递函数"><a href="#关于传递函数" class="headerlink" title="关于传递函数"></a>关于传递函数</h3><p>hardlim是在n&lt;0时输出0，而hardlims是在n&lt;0时输出-1</p><p>他们都是在n&gt;0时输出1</p><h3 id="绘图函数"><a href="#绘图函数" class="headerlink" title="绘图函数"></a>绘图函数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plotpv(P,T); <span class="comment">%绘制输入向量的图像，P是样本，T是分类</span></span><br><span class="line">plotpv(W,b); <span class="comment">%绘制分界线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% P是输入矩阵 T是目标</span></span><br><span class="line"><span class="comment">%% W是权值 b是偏差</span></span><br></pre></td></tr></table></figure><p>绘图函数中有这样一句：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plotpc(net.iw&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,net.b&#123;<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><p>对于net.iw{1,1}，第一个1是第一层，第二个1是该层第一个输入</p><p>iw属性就是权值，b属性是偏移，net.b{1}意思是net这个网络的第一层的偏移量</p><h3 id="神经网络的保存"><a href="#神经网络的保存" class="headerlink" title="神经网络的保存"></a>神经网络的保存</h3><blockquote><p>使用save [保存名] [神经网络的引用]来进行保存</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save net1 net;</span><br><span class="line"><span class="comment">%% 将上例中的net保存在本地，名字叫做net1</span></span><br></pre></td></tr></table></figure><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.trainParam.epochs=<span class="number">15</span>;     <span class="comment">%设置训练次数最大是15</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">clear all;</span><br><span class="line">close all;</span><br><span class="line"><span class="comment">%%开头例行作法，保持四大皆空</span></span><br><span class="line"></span><br><span class="line">P=[<span class="number">-0.4</span> <span class="number">-0.4</span> <span class="number">0.5</span> <span class="number">-0.2</span> <span class="number">-0.7</span>;<span class="number">-0.6</span> <span class="number">0.6</span> <span class="number">-0.4</span> <span class="number">0.3</span> <span class="number">0.8</span>];</span><br><span class="line">T=[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>];</span><br><span class="line"><span class="comment">%%P与T分别是测试数据集和目标数据集</span></span><br><span class="line"></span><br><span class="line">net=newp(minmax(P),<span class="number">1</span>,<span class="string">&#x27;hardlim&#x27;</span>,<span class="string">&#x27;learnp&#x27;</span>);</span><br><span class="line">net=train(net,P,T);        <span class="comment">%训练神经网络</span></span><br><span class="line">Q=[<span class="number">0.7</span> <span class="number">-0.5</span>;<span class="number">1.2</span> <span class="number">-0.5</span>];     <span class="comment">%测试向量</span></span><br><span class="line">Y=sim(net,Q);              <span class="comment">%基于已有网络获得仿真结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">plotpv(P,T)                <span class="comment">%绘制训练数据集</span></span><br><span class="line">plotpc(net.iw&#123;<span class="number">1</span>&#125;,net.b&#123;<span class="number">1</span>&#125;) <span class="comment">%绘制训练数据集分界线</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">plotpv(Q,Y)                <span class="comment">%绘制测试数据集</span></span><br><span class="line">plotpc(net.iw&#123;<span class="number">1</span>&#125;,net.b&#123;<span class="number">1</span>&#125;) <span class="comment">%绘制测试数据集分界线</span></span><br></pre></td></tr></table></figure><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li>设计</li><li>训练</li><li>仿真</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> 数学建模 </tag>
            
            <tag> 炼丹 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础|离散数学期末知识点复习</title>
      <link href="/2021/12/26/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E8%A1%A5%E6%BC%8F/"/>
      <url>/2021/12/26/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E8%A1%A5%E6%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="BinaryDog-Lee’s-Note-of-Discrete-Mathematics"><a href="#BinaryDog-Lee’s-Note-of-Discrete-Mathematics" class="headerlink" title="BinaryDog Lee’s Note of Discrete Mathematics"></a>BinaryDog Lee’s Note of Discrete Mathematics</h1><blockquote><p>本文档面向有没有离散数学基础还想期末临时抱佛脚的人，但是仍旧脱离不了其本质为笔记的局限性，故需酌情阅读。如有不适，请及时关闭本文档，打开王者荣耀以缓解症状。</p></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合的长度"><a href="#集合的长度" class="headerlink" title="集合的长度"></a>集合的长度</h3><blockquote><p>集合加绝对值表示集合的长度</p></blockquote><p>A = {1,2,{1,2}} 则|A|=3</p><p>B = {∅,2,{1,2}} 则|B|=3</p><h3 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h3><blockquote><p>集合A的全部子集构成的<b>集合</b>称之为A的幂集，记作P(A)</p></blockquote><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><blockquote><p>两个非空集合A与B间存在着对应关系f，而且对于A中的每一个元素a，B中总有唯一的一个元素b与它对应，就这种对应为从A到B的映射，记作f：A→B</p></blockquote><p>像：b称为元素a在映射f下的像，记作：b=f(a)</p><p>原像：a称为b关于映射f的原像。集合A中所有元素的像的集合称为映射f的值域，记作f(A)</p><p>要点：</p><ol><li>定义域<b>每个元素</b>都能对应到值域中的<b>唯一一个</b>元素</li><li>“映射”是比函数更广泛一些的数学概念，函数是特殊的映射</li><li>函数的值域不能有剩余元素，而映射可以</li><li>映射和函数都不可以一对多</li><li>映射可以多对一</li><li>原像集应当是像集的子集</li></ol><p>若集合AB的元素个数为m,n, 则从集合A到集合B的映射的个数为$m^{^{n}}$</p><p>映射想象镜子：</p><ol><li>一个镜子照一个元素不能照出两个像。</li><li>集合A中每个元素都会被照到</li><li>单射：像的原像是唯一的</li><li>满射集合B的每个元素都有原像</li></ol><h3 id="单射"><a href="#单射" class="headerlink" title="单射"></a>单射</h3><blockquote><p>单射（injection）：每一个x都有唯一的y与之对应；</p></blockquote><p>设f是由集合A到集合B的映射，如果所有x,y∈A,且x≠y，都有f(x)≠f(y),则称f为由A到B的单射。</p><h3 id="满射"><a href="#满射" class="headerlink" title="满射"></a>满射</h3><blockquote><p>满射（surjection）：每一个y都必有至少一个x与之对应；</p></blockquote><p>对于$y=x^{^{2}}$，当你定义X属于实数且Y属于实数集时由于存在像Y&lt;0没有原像X对应所以不满射，但是如果你改变像集定义为正实数那就满射了。</p><p>综上，映射先看集合的范围。</p><h3 id="双射"><a href="#双射" class="headerlink" title="双射"></a>双射</h3><blockquote><p>双射（bijection）：同时满足单射满射，即每一个x都有y与之对应，每一个y都有x与之对应。</p></blockquote><p>当且仅当映射F满足双射，其逆映射G存在。</p><h2 id="命题逻辑与等值演算"><a href="#命题逻辑与等值演算" class="headerlink" title="命题逻辑与等值演算"></a>命题逻辑与等值演算</h2><h3 id="析取与合取"><a href="#析取与合取" class="headerlink" title="析取与合取"></a>析取与合取</h3><table><thead><tr><th>name</th><th>symbol</th></tr></thead><tbody><tr><td>析取</td><td>∨</td></tr><tr><td>合取</td><td>∧</td></tr><tr><td>蕴含</td><td>→</td></tr></tbody></table><blockquote><p>所有简单合取式都是极小项的析取范式称为主析取范式</p></blockquote><p>文字：命题变项及其否定。</p><p>简单析取式用∧连接若干有限个文字，如p∧q∧$\neg$r</p><p>简单合取式用∨连接若干有限个文字</p><table><thead><tr><th>范式</th><th>定义</th></tr></thead><tbody><tr><td>析取范式</td><td>由有限个简单合取式的析取构成的命题公式</td></tr><tr><td>合取范式</td><td>由有限个简单析取式的合取构成的命题公式</td></tr></tbody></table><table><thead><tr><th>名字</th><th>每个字母(或者它的否定)只出现一次时被称为</th></tr></thead><tbody><tr><td>简单合取式</td><td>极小项</td></tr><tr><td>简单析取式</td><td>极大项</td></tr></tbody></table><table><thead><tr><th>范式</th><th>定义</th></tr></thead><tbody><tr><td>主合取范式</td><td>合取的是有限个极大项</td></tr><tr><td>主析取范式</td><td>析取的是有限个极小项</td></tr></tbody></table><table><thead><tr><th>公式</th><th>成真赋值</th><th>名称</th></tr></thead><tbody><tr><td>$\neg p \wedge  \neg q \wedge  \neg r$</td><td>0  0  0</td><td>${m\mathop{}\nolimits_0}$</td></tr></tbody></table><table><thead><tr><th>公式</th><th>成<b>假</b>赋值</th><th>名称</th></tr></thead><tbody><tr><td>${p \vee q \vee r}$</td><td>0  0  0</td><td>${M\mathop{}\nolimits_0}$</td></tr></tbody></table><p>不难看出，不管事极小项还是极大项的0号位都是赋值为000时的，事实上从角标0到7就是对应它们的二进制，也就是000到111</p><p>求析取范式和合取范式常用的套路：</p><ol><li>消去$\to$使用公式 $A \to B \Leftrightarrow  \neg A \vee B$</li><li>归谬论：$\left( A \to B \left)  \wedge  \left( A \to  \neg B \left)  \Leftrightarrow  \neg A\right. \right. \right. \right.$</li></ol><h3 id="等值演算"><a href="#等值演算" class="headerlink" title="等值演算"></a>等值演算</h3><blockquote><p>由已知的等值式退出另外一些等值式的过程叫做等值演算。等值演算用到的置换规则并不要求写明。</p></blockquote><p>证明两个公式不等值一般不能用等值演算法，可以使用如下三种方法：</p><ol><li>真值表法</li><li>观察法（找反例）</li><li>复杂的式子在等值演算后使用1、2</li></ol><p>证明两个式子等值：将某公式A化简，若能化简为B，则认为A和B是等值的</p><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul><li><p>全称量词$\forall$</p></li><li><p>存在量词$\exists$</p></li></ul><p>把这两个东西去掉，换成集合里具体的东西叫做<b>量词消去</b></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>树的度：无向图顶点的边数叫度。有向图顶点的边数叫出度和入度。</p><p>分支点：不属于叶子节点的节点。</p><h3 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h3><blockquote><p>每对顶点之间都恰好有一条边的简单图</p></blockquote><p>k阶完全图有k*(k-1)/2条边</p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><h3 id="关系的性质"><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h3><ol><li>自反性：</li></ol><blockquote><p>设R是A上的一个二元关系，若对于A中的每一个元素a，(a,a)都属于R，则称R为自反关系。换言之，在自反关系中，A中每一个元素与其自身相关。</p></blockquote><p>主对角线全是0就自反，全是1就反自反，可以既不自反又不反自反</p><ol start="2"><li>对称性：</li></ol><p>有xRy就有yRx，即有(a,b)就有(b,a)</p><p>对称性反对称性不可以同时存在</p><ol start="3"><li>传递性</li></ol><p>(a,b)和(b,c)就有(a,c)</p><h3 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h3><blockquote><p>等价关系是集合上的一种特殊的二元关系,它同时具有自反性、对称性和传递性。</p></blockquote><h3 id="偏序关系与哈斯图"><a href="#偏序关系与哈斯图" class="headerlink" title="偏序关系与哈斯图"></a>偏序关系与哈斯图</h3><h4 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h4><blockquote><p>偏序关系要满足自反性、反对称性和传递性</p></blockquote><p>偏序关系记作≤，如果有$&lt; x,y &gt;  \in  \preccurlyeq$，那么记作$x \preccurlyeq y$，读作x小于等于y</p><p>这里的小于等于不是数字大小上的，而是一个顺序性，x排在y的前面或者x就是y。并且有如下定义：</p><ol><li>${ \forall x,y \in A,x \prec y \Leftrightarrow x \preccurlyeq y \wedge x \neq y}$</li><li>$\forall x,y \in A,x\text{与}y\text{可}\text{比} \Leftrightarrow x \preccurlyeq y \vee y \preccurlyeq x$</li></ol><p>例如:A={1,2,3},$\preccurlyeq$是A上的整除关系，则有三种情况：</p><ol><li>1 ${\prec}$ 2,1 ${\prec}$ 3</li><li>1 = 1, 2 = 2, 3 = 3</li><li>2和3不可比</li></ol><p>设R是非空集合A上的偏序关系，若任意的A中x与y均可比则R成为A上的全序关系。</p><p>设$&lt; A, \preccurlyeq  &gt;$为偏序集，${ \forall x,y \in A}$，如果$x \prec y$且不存在$z \in A$使得$x \prec z \prec y$，则称y覆盖x。</p><p>{1,2,4,6}集合上的整除关系，2覆盖1，4和6都覆盖2，但4不覆盖1，6也不覆盖4。</p><h4 id="哈斯图"><a href="#哈斯图" class="headerlink" title="哈斯图"></a>哈斯图</h4><p>哈斯图是自底向上的，在这个 $\preccurlyeq$ 中最小的就在最底下。</p><ol><li>最上面的就是最大元，最大元可能不存在，存在的话也只有一个。</li><li>最下面的就是最小元</li><li>极大元的意思就是在可比的那一条链中最大的</li><li>极小元的意思就是在可比的那一条链中最小的</li></ol><p>最大元就找那B中，如果子图也是有分叉就没得最大元，没分叉尽头最高的就是了。</p><p>最小元就找那个B中 如果只有一个根（把哈斯图看成森林），那个根就是了，如果有好几个，就没得最小元。</p><p>极大元和极小元类似上述定义，但是如果有好几个，那就算好几个，也就是说这俩是必然存在而且可能不止一个的。</p><p>比如说树杈顶端有好几个 都互相不可比，那就都是极大元。</p><p>B的最小元一定是B的下界，B的最大元一定是B的上界。</p><p>由上面所述可知，未必存在最小元和最大元，那么上界和下界也是未必存在的。</p><blockquote><p>上界定义：对于偏序集$&lt; A, \preccurlyeq  &gt;$,$B \subseteq A,y \in A$，有$\forall x \left( x \in B \to x \preccurlyeq y \right)$成立</p></blockquote><blockquote><p>下界定义：对于偏序集$&lt; A, \preccurlyeq  &gt;$,$B \subseteq A,y \in A$，有$\forall x \left( x \in B \to y \preccurlyeq x \right)$成立</p></blockquote><p>显然上/下界是可能不在B里（但是一定在A里）</p><ul><li>上确界就是上界中“最小”的那个</li><li>下确界就是下界中“最大”的那个</li></ul><h3 id="关系的运算"><a href="#关系的运算" class="headerlink" title="关系的运算"></a>关系的运算</h3><h4 id="集合表达式"><a href="#集合表达式" class="headerlink" title="集合表达式"></a>集合表达式</h4><blockquote><p>例如：R={&lt;x,y&gt;|x是y的倍数}</p></blockquote><h4 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h4><p>点＋箭头嘛</p><h4 id="关系矩阵"><a href="#关系矩阵" class="headerlink" title="关系矩阵"></a>关系矩阵</h4><p>就是一个矩阵，第i行j列的那个$r\mathop{}\nolimits_$如果存在$x\mathop{}\nolimits_Rx\mathop{}\nolimits_$那就写1，否则写0。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>对于A上的关系R，添加尽可能少的一些有序对使新的关系R’具有性质x，则称R’为R的x闭包</p></blockquote><table><thead><tr><th>记作</th><th>名字</th><th>定义</th></tr></thead><tbody><tr><td>r(R)</td><td>自反闭包</td><td>r(R)=${R \cup R\mathop{}\nolimits^0}$</td></tr><tr><td>s(R)</td><td>对称闭包</td><td>s(R)=${R \cup R\mathop{}\nolimits^1}$</td></tr><tr><td>t(R)</td><td>传递闭包</td><td>t(R)=${R \cup R\mathop{}\nolimits^2 \cup R\mathop{}\nolimits^3 \cup  \cdots }$</td></tr></tbody></table><h4 id="关系的幂运算"><a href="#关系的幂运算" class="headerlink" title="关系的幂运算"></a>关系的幂运算</h4><p>关系的幂运算是在关系的右复合运算基础上进行的</p><p>幂运算的计算方式如下：</p><p>$$ R\mathop{}\nolimits^{ {n+1} }=R\mathop{}\nolimits^ \circ R $$</p><p>对于任何A上任何关系，显然都有</p><p>$$ R\mathop{}\nolimits_0=R\mathop{}\nolimits_1=I\mathop{}\nolimits_ $$</p><p>换言之，A上任何关系的零次幂都相等。</p><p>右复合运算结果如果有相同的，只保留一个，不重复。</p><table><thead><tr><th>幂</th><th>定义</th></tr></thead><tbody><tr><td>$R\mathop{}\nolimits^0$</td><td>$\left{  &lt; x,x &gt;  \mid x \in A \left} =I\mathop{}\nolimits_\right. \right.$</td></tr><tr><td>$R\mathop{}\nolimits^1$(关系的逆)</td><td>&lt;x,y&gt;改为&lt;y,x&gt;</td></tr></tbody></table><h2 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h2><h3 id="单位元"><a href="#单位元" class="headerlink" title="单位元"></a>单位元</h3><blockquote><p>若a<em>e=a，e称为右单位元，若e</em>a=a，e称为左单位元，若a<em>e=e</em>a=a，则e称为单位元。</p></blockquote><p>单位元用e表示，单位元也可以成为幺元。</p><p>除法中1是右单位元</p><h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><blockquote><p>左逆元：对于$x \in S$ 存在 $y \circ x=e$，那个y就是左逆元<br><br>右逆元：对于$x \in S$ 存在 $x \circ y=e$，那个y就是右逆元<br><br>逆元：若$y \in S$既是x的左逆元又是x的右逆元，则称y是x的逆元</p></blockquote><h3 id="生成元"><a href="#生成元" class="headerlink" title="生成元"></a>生成元</h3><blockquote><p>群中元素可以由最小数目个群元的乘积生成，这组群元称为该群的生成元，生成元的数目为有限群的秩。</p></blockquote><h3 id="幂等元"><a href="#幂等元" class="headerlink" title="幂等元"></a>幂等元</h3><blockquote><p>满足a · a = a的就是</p></blockquote><h3 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h3><blockquote><p>群G的某些非空子集H关于群的运算也能构成群，则称为G的子群。</p></blockquote><h3 id="交换群"><a href="#交换群" class="headerlink" title="交换群"></a>交换群</h3><blockquote><p>若群G中的二元运算是可交换的，则称G为交换群或阿贝尔群。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础|Java期末复习笔记</title>
      <link href="/2021/12/25/NoteofJava/"/>
      <url>/2021/12/25/NoteofJava/</url>
      
        <content type="html"><![CDATA[<h1 id="BinaryDog-Lee’s-Note-of-Java"><a href="#BinaryDog-Lee’s-Note-of-Java" class="headerlink" title="BinaryDog Lee’s Note of Java"></a>BinaryDog Lee’s Note of Java</h1><blockquote><p>本文档面向有C++基础的人群，以期提供C++到Java的快速入门，但是仍旧脱离不了其本质为笔记的局限性，故需酌情阅读。如有不适，请及时关闭本文档，打开王者荣耀以缓解症状。</p></blockquote><h2 id="catalogue"><a href="#catalogue" class="headerlink" title="catalogue"></a>catalogue</h2><p><a href="#1">1.Java基础属性特征及概念</a></p><h2 id="detail"><a href="#detail" class="headerlink" title="detail"></a>detail</h2><blockquote><p>以下代码运行环境：<br>-java 17.0.1 2021-10-19 LTS<br>-Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)<br>-Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)<br>-VS code</p></blockquote><h2 id="1">1.Java基础属性特征及概念</h2><h3 id="1-1-Java程序示例"><a href="#1-1-Java程序示例" class="headerlink" title="1.1 Java程序示例"></a>1.1 Java程序示例</h3><p>在学习一门语言的功能前，我们往往希望看到一个实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str=input.next();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会读取用户的输入并再次输出。</p><p>我们使用了以下代码来导入一个包(Package)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure><p>如果您不了解什么是包也不要紧，稍后将会讲到。但是我们总是要看一下它的直观作用。</p><p>如果将这句话注释掉，那么本程序就需要这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import java.util.*;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        java.util.Scanner input=<span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">        String str=input.next();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，java.util是一个包名，它是实用工具类库。通过使用*通配符，就可以使用java.util.*代表该包内的所有类。也就是说，这句话让您可以使用整个java.util工具包里的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//那么进一步地，当您确认只使用Scanner时，也可以这样写</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><p>Scanner类的实例input从System.in里读入数据，它的next()方法要求它获取一个<b>不带有空格的字符串</b>（如果遇到空格，它自然就停止读取），当然，它也会忽略首个有效字符前的空格。</p><p>读取完的数据保存到了String类型的变量str中。随后使用了System.out.println()方法输出str的内容。</p><p>以上即是本程序的全部内容。</p><h3 id="1-2-Java程序的编译运行"><a href="#1-2-Java程序的编译运行" class="headerlink" title="1.2 Java程序的编译运行"></a>1.2 Java程序的编译运行</h3><p>那么一个java程序是如何编译运行的呢?</p><ol><li><p>Java文件会由编译器编译成.class文件（字节码文件）</p></li><li><p>字节码文件由java虚拟机解释运行，解释执行即为目标代码生成并执行。</p></li></ol><p>整个过程是<b>编译+解释</b>，所以是Java是一种<b>半解释语言</b>。</p><p>如果有其他语言的编程经验，您可能会考虑到：<b>在有多个源代码文件共同构成一个程序的情况下</b>该如何？</p><p>java编译一个类时，若这个类所依赖的类还没有被编译，编译器会自动的先编译这个所依赖的类，然后引用。若java编译器在指定的目录下找不到该类所依赖的类的 .class文件或者 .java源文件，就会报”Can’t found sysbol”的异常错误。</p><p>也就是说，在不显式指定指定依赖的文件时，Java编译器遇到没有定义的类会认为这个在其他文件里定义了，并因此会查找该类的.java文件。</p><p>读到这里您可能有如下问题：</p><ol><li>一个.Java文件能写几个类？<blockquote><p>一个.Java文件可以写多个类，但是最多有一个public类。没有public类也能编译出来文件</p></blockquote></li><li>.Java文件的命名<blockquote><p>以其中public类的名字命名</p></blockquote></li><li>一个.Java文件有多个类的编译结果<blockquote><p>会分别以内含的各个类名生成.class文件</p></blockquote></li></ol><p>提示：.Java文件归根到底无关紧要（运行时不需要），有用的是他生成的.class文件</p><h3 id="1-3-Java标识符定义规则"><a href="#1-3-Java标识符定义规则" class="headerlink" title="1.3 Java标识符定义规则"></a>1.3 Java标识符定义规则</h3><p>一言以蔽之：<b>字母数字下划线或者$并且不允许数字开头</b></p><ul><li>常量使用完全大写+下划线，如MAXIMUM_SIZE</li><li>类/接口/变量/方法名大小写混合，</li><li>但是变量/方法名开头首字母小写如anyVariableWord，类和接口首字母大写如BasicPersonClass</li><li>变量与方法名一般不以_和$开头，因为在对于内部类有特殊含义</li></ul><h3 id="1-4-杂项"><a href="#1-4-杂项" class="headerlink" title="1.4 杂项"></a>1.4 杂项</h3><p>java使用字符集：Unicode（而非ascii）</p><h2 id="2">2.I/O</h2><blockquote><p>使用流的相关内容，您需要包含java.io包</p></blockquote><blockquote><p>您的目标：掌握字节流、字符流以及文件相关的类和方法的使用</p></blockquote><h3 id="2-1-流的分类"><a href="#2-1-流的分类" class="headerlink" title="2.1 流的分类"></a>2.1 流的分类</h3><p>我们依据数据的流向来划分出输入输出流。向内存中写入就是输入流，从内存中写出就是输出流。毕竟读取文件倒内存用的是输入流，写入数据到文件用的是输出流。</p><p>依据操作单元划分，会有字节流（操作byte类型数据）和字符流。</p><p>按流的功能不同分为：节点流和处理流。</p><table><thead><tr><th></th><th>输入流</th><th>输出流</th></tr></thead><tbody><tr><td>字节流</td><td>InputStream</td><td>OutPutStream</td></tr><tr><td>字符流</td><td>Reader</td><td>Writer</td></tr></tbody></table><blockquote><p>Java Io流的40多个类都是从上表4个抽象类基类中派生出来的。由于以上四个类均是抽象基类，因此本身<b>不能创建实例</b>。</p></blockquote><h3 id="2-2-字节流和字符流的区别"><a href="#2-2-字节流和字符流的区别" class="headerlink" title="2.2 字节流和字符流的区别"></a>2.2 字节流和字符流的区别</h3><blockquote><p>字节流在操作的时候本身不用缓存区而是与文件直接对接的，字符流操作时需要缓冲区。</p></blockquote><p>但是缓冲区就对应一个刷新问题，如果不刷新就没有东西写入/写出，并且要注意的是流关闭时是有一次强制刷新的。</p><table><thead><tr><th>方法名称</th><th>作用</th><th>流是否可以使用</th></tr></thead><tbody><tr><td>flush</td><td>刷新缓冲区</td><td>流对象可以继续使用</td></tr><tr><td>close</td><td>先刷新缓冲区，然后通知系统释放资源</td><td>流对象不可以继续使用</td></tr></tbody></table><p>此外，字节流读的是二进制数据，字符流是已经把二进制数据转化为了字符（但是有些二进制数据未必能按照字符解释对吧？比如说图像数据）。</p><p>所以文本文件用字符流为宜，其他文件诸如音视频等采用字节流。</p><h3 id="2-3-文件读写的前置知识"><a href="#2-3-文件读写的前置知识" class="headerlink" title="2.3 文件读写的前置知识"></a>2.3 文件读写的前置知识</h3><blockquote><p>前置知识点：主函数后面跟着的throws IOException含义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>如果主函数中有导致IOException的语句，并且不打算使用try-catch语句捕获IOException这种异常，就得用throws IOException在主函数外被捕获。</p><p>它的作用就是让异常在所修饰的方法外部被捕获，因此可以省略在main函数内的异常检测。</p><p>异常的详细内容请看第6章。</p><blockquote><p>前置知识点：绝对路径与相对路径</p></blockquote><p>假设您的工程文件结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┬project</span><br><span class="line">├bin</span><br><span class="line">├lib</span><br><span class="line">└src</span><br></pre></td></tr></table></figure><p>并且priject文件夹目录是D:/project</p><p>那么绝对路径就是D:/project</p><p>相对路径是JVM虚拟机启动的路径，为了运行该工程，会在project文件夹启动，使用./代表它，此时表示的路径和D:/project是等价的。</p><p>类似地，为了访问放有.java文件的scr文件夹，您可以使用D:/project/bin或者./bin</p><p>并且，\和/多数情况下是等价的，也就是说您可以使用D:\project\bin</p><p>一般本地文件两个斜杠是等价的，网络相关请使用斜杠</p><p>我们创建一个a1.txt并且不显式指明路径时，缺省路径就是相对路径，也就是会在project中创建一个a1.txt，其绝对路径是D:/project/a1.txt</p><h3 id="2-4-文件File类"><a href="#2-4-文件File类" class="headerlink" title="2.4 文件File类"></a>2.4 文件File类</h3><blockquote><p>作为输入流的文件必须存在，否则会抛出异常。作为输出流的文件不一定需要存在，没有就会被自动创建一个。</p></blockquote><p>文件的操作需要一个File对象。File类并不提供读写操作，而只是用于操作文件和获得文件的信息等。如果需要读写，请使用文件流。</p><p>您可以通过下面的方法创建一个File对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型是public File(String pathname)</span></span><br><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;1.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么一个完整的示例应当像下列这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.getPath());<span class="comment">//1.txt</span></span><br><span class="line">        System.out.println(f1.getParent());<span class="comment">//null</span></span><br><span class="line">        System.out.println(f1.getClass());<span class="comment">//class java.io.File</span></span><br><span class="line">        System.out.println(f1.getAbsolutePath());<span class="comment">//输出它所在的绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们亦可使用File文件的isFile()方法判断它承载的path是否是一个合法的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">System.out.println(file3.isFile()); <span class="comment">// 结果是false</span></span><br></pre></td></tr></table></figure><p>相应地，可以使用isDirectory()来判断是否是一个路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/javacode/image1.jpg&quot;</span>);</span><br><span class="line">File f2 = <span class="keyword">new</span> File(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">System.out.println(f1.isDirectory()); <span class="comment">// 结果是false</span></span><br><span class="line">System.out.println(f1.isDirectory()); <span class="comment">// 结果是false</span></span><br></pre></td></tr></table></figure><p>类似的应用还有delete()删除文件</p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>public boolean mkdir()</td><td>创建目录(已存在或上级目录存在返回false)</td></tr><tr><td>public boolean mkdirs()</td><td>同上，但是路径不存在会自动创建</td></tr><tr><td>public String[] list()</td><td>获取其中包含的各种文件的名字</td></tr><tr><td>public boolean renameTo(File dest)</td><td>重命名</td></tr></tbody></table><h3 id="2-5文件读写"><a href="#2-5文件读写" class="headerlink" title="2.5文件读写"></a>2.5文件读写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">            out.write(<span class="string">&quot;这段话是txt文件内写入的内容。&quot;</span>);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们在工程根目录获得了test.txt并且其中有这样一段（不包括引号）内容：“这段话是txt文件内写入的内容。”</p><p>写入文件必然涉及编码转换问题（转换为二进制才能写入文件），使用buffer缓冲并一次性转换效率高于即时写入。缓冲流本身并不具备读或者写的功能，它的作用其实是为其他流加速。</p><p>关于BufferedWriter的解释：</p><ol><li>是一种缓冲流</li><li>一般<b>套接在FileWriter</b>上使用</li></ol><p>类似地读文件采用BufferReader</p><ol><li>是一种缓冲流</li><li>一般<b>套接在FileReader</b>上使用</li><li>由Reader类扩展而来，提供通用的缓冲方式文本读取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">String s = br.readLine();</span><br><span class="line">System.out.println(s);<span class="comment">//输出：这段话是txt文件内写入的内容。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还记得我们读取键盘输入的Scanner吗？</p><p>您可以这样改写它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">String s = br.readLine();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将InputStreamReader套接在了System.in，又将BufferReader套接在了InputStreamReader，通过有缓冲的方式读取System.in，也就是键盘是的内容，并且原封不动显示出来。</p><h3 id="2-6-IO增补"><a href="#2-6-IO增补" class="headerlink" title="2.6 IO增补"></a>2.6 IO增补</h3><p>文件IO的模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读工程根目录下的test.txt并且按行号输出，输出后在转写到另一个txt文件中</span></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建两个File对象</span></span><br><span class="line">        File a = <span class="keyword">new</span> File(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        File b = <span class="keyword">new</span> File(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//创建文件IO的流</span></span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(a);</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(b);</span><br><span class="line"><span class="comment">//创建辅助IO的缓冲流套接在其上</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">            String temp;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>((temp = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(flag+<span class="string">&quot; &quot;</span>+ temp);</span><br><span class="line">                bw.write(flag+<span class="string">&quot; &quot;</span>+ temp);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//缓冲流关闭前总是要刷新一下的</span></span><br><span class="line">            bw.flush();</span><br><span class="line"><span class="comment">//关闭这些流，流这种资源申请完不再使用后要进行关闭操作</span></span><br><span class="line">            br.close();</span><br><span class="line">            bw.close();</span><br><span class="line">            fr.close();</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"><span class="comment">//以上操作中IO流的申请都是可能抛出IOException的</span></span><br><span class="line"><span class="comment">//故而需要使用try块包围</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个程序，读取文件test.txt的内容并在控制台输出。如果源文件不存在，则显示相应的错误信息。</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;test1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(f);<span class="comment">//将文件读取到内容中</span></span><br><span class="line">            <span class="keyword">int</span> m;</span><br><span class="line">            <span class="keyword">while</span>((m=fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)(m));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3">3.Java的代码结构</h2><h3 id="3-1-静态代码块"><a href="#3-1-静态代码块" class="headerlink" title="3.1 静态代码块"></a>3.1 静态代码块</h3><blockquote><p>核心要义：静态代码块随着类的加载而执行，而且只执行一次</p></blockquote><p>静态代码块长这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//...anything</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似地还有非静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...anything   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这类代码块一般出现在主函数外面使用，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;静态代码块2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;静态代码块1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;主函数运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="comment">//静态代码块2</span></span><br><span class="line"><span class="comment">//静态代码块1</span></span><br><span class="line"><span class="comment">//主函数运行</span></span><br></pre></td></tr></table></figure><p>其中不难看出如下信息：</p><ol><li>静态代码块按照书写先后顺序执行</li><li>静态代码块先于主函数内容执行</li></ol><p>此外要强调的是，静态代码块不能存在任何方法体中，放在构造代码块中也不行。</p><h3 id="3-2-构造代码块"><a href="#3-2-构造代码块" class="headerlink" title="3.2 构造代码块"></a>3.2 构造代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;主函数运行&quot;</span>);</span><br><span class="line">Base a = <span class="keyword">new</span> Base();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类构造代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Base()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察本例，你可以看到输出如下：</p><blockquote><p>主函数运行<br>父类静态代码块<br>父类构造代码块<br>父类构造方法</p></blockquote><p>综上所示不难看出：</p><ol><li>构造代码块不是构造方法</li><li>构造代码块先于构造方法执行</li><li>静态代码块先于构造代码块执行</li></ol><p>构造代码块可以做什么：例如统计该类实例化多少次</p><h3 id="3-3-构造方法"><a href="#3-3-构造方法" class="headerlink" title="3.3 构造方法"></a>3.3 构造方法</h3><blockquote><p>构造方法的一个直观类比就是Cpp的构造函数</p></blockquote><p>构造方法是类生成实例时调用的方法。</p><p>关于构造方法有以下常见的几个问题：</p><ol><li>构造方法有返回值吗？<blockquote><p>构造方法没有返回值</p></blockquote></li><li>构造方法可以有参数吗？<blockquote><p>可以。有参数的叫做有参构造方法，无参数的叫做无参构造方法</p></blockquote></li><li>我在编写类时可以不为之编写构造方法吗？<blockquote><p>可以。但是系统会自动添加无参的构造方法。但是如果有手动书写，不论写的是否是无参的，系统都不会在自动添加。</p></blockquote></li><li>构造方法可以被继承吗？<blockquote><p>不可以。但是您可以使用super()来调用父类的构造方法。</p></blockquote></li><li>构造方法可以重载吗<blockquote><p>可以。</p></blockquote></li><li>构造方法可以直接被调用吗？<blockquote><p>不可以，构造方法只能通过new运算符在创建对象时自动调用。</p></blockquote></li><li>构造方法一般用来干什么？<blockquote><p>初始化实例的值。</p></blockquote></li></ol><p>此外，构造方法不能够被static、final、synchronized、abstract和native修饰。</p><p>在java中普通函数可以和构造函数同名，但是必须带有返回值。</p><h3 id="3-4-普通代码"><a href="#3-4-普通代码" class="headerlink" title="3.4 普通代码"></a>3.4 普通代码</h3><p>普通代码块在方法体中定义，执行顺序按书写先后。</p><p>综上几节所述，不难看出执行顺序：</p><blockquote><p>静态代码块&gt;构造代码块&gt;构造函数&gt;普通代码块</p></blockquote><h3 id="3-5-在继承关系下，程序执行的顺序问题"><a href="#3-5-在继承关系下，程序执行的顺序问题" class="headerlink" title="3.5 在继承关系下，程序执行的顺序问题"></a>3.5 在继承关系下，程序执行的顺序问题</h3><p>重点理解一个概念：</p><p>子类实例化需要调用子类的构造方法，但是调用子类构造方法之前需要先调用父类构造方法。调用父类构造方法将父类已有的属性初始化，然后在调用子类构造方法给子类独有的属性初始化。</p><p>这这意味着什么？不妨先看一段程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;主函数运行&quot;</span>);</span><br><span class="line">Base1 a = <span class="keyword">new</span> Base1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">Base(<span class="keyword">int</span> b)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类构造方法&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.a = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">Base1()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;子类构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>巧了，它编译不过。在笔者的环境中报错如下：</p><blockquote><p>Implicit super constructor Base() is undefined. Must explicitly invoke another constructor</p></blockquote><p>子类实例化要调用父类的构造方法，在默认的情况下它想去调用父类的无参构造方法，也就是Base()，可是它找不到，所以报错了。</p><p>子类构造方法的本质相当于如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Base1()&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;子类构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么是Super？如果您不理解，请先看下去，后面会讲的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;主函数运行&quot;</span>);</span><br><span class="line">Base1 a = <span class="keyword">new</span> Base1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">Base(<span class="keyword">int</span> b)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类含参构造方法&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.a = b;</span><br><span class="line">&#125;Base()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类无参构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">Base1()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;子类构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果为之添加一个含参构造方法就可以正常运行。</p><p>疑问：我不想写无参构造函数，能行吗？</p><blockquote><p>可以，使用super()调用父类含参构造方法就行。它总归得在执行子类构造方法前执行一个父类的构造方法，执行哪个是可以被人为决定的。</p></blockquote><p>这样您可以修改Base1()为下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Base1()&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;子类构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中我们为父类构造方法传入了定值2，事实上您也可以传入一个变量。</p><h3 id="3-6-super"><a href="#3-6-super" class="headerlink" title="3.6 super"></a>3.6 super</h3><p>关于super还是要说一下的，super调用父类构造时必须放在子类构造方法的<b>首行</b>上。</p><p>什么是super？super类似于this，只不过this指向的是本身，而super指向的是父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">Base1 a = <span class="keyword">new</span> Base1();</span><br><span class="line">a.showa();      <span class="comment">//sub:8</span></span><br><span class="line">a.showbasea();  <span class="comment">//base:0</span></span><br><span class="line">a.seta(<span class="number">5</span>);      <span class="comment">//</span></span><br><span class="line">a.showa();      <span class="comment">//sub:8</span></span><br><span class="line">a.showbasea();  <span class="comment">//base:5</span></span><br><span class="line">a.setsuba(<span class="number">7</span>);   <span class="comment">//</span></span><br><span class="line">a.showbasea();  <span class="comment">//base:5</span></span><br><span class="line">a.showa();      <span class="comment">//sub:7</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s = f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setsuba</span><span class="params">(<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s = f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showbasea</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;base:&quot;</span>+<span class="keyword">super</span>.s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showa</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sub:&quot;</span>+<span class="keyword">this</span>.s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>子类调用父类方法修改的是父类变量</li><li>子类同名变量可以在子类定义的方法处理时变量效果类似于覆盖父类</li><li>第二条的描述只是直观现象，父类仍可以使用super访问到</li></ol><p>类似地，super还可以调用父类的构造方法，比如使用super(int a)调用父类含有一个int的构造函数（如果存在的话）。</p><h2 id="4">4.Java的数组</h2><h3 id="4-1-数组的声明"><a href="#4-1-数组的声明" class="headerlink" title="4.1 数组的声明"></a>4.1 数组的声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般可用这几种方式声明</span></span><br><span class="line"><span class="keyword">int</span>[] a= <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">//使用.length获取长度</span></span><br><span class="line">System.out.println(a.length);<span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><p>java允许多维数组每一行的长度不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intArray[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">11</span>&#125;, &#123;<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>&#125;, &#123;<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>数组有两种常见异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">b = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(b[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// java.lang.NullPointerException</span></span><br><span class="line">System.out.println(b[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//java.lang.ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure><p>中文名称分别是空指针异常和数组索引值越界。</p><p>不规则数组访问和遍历可以使用 for 和 for-each 循环，但要注意下标越界异常发生。</p><h3 id="4-2-常用功能"><a href="#4-2-常用功能" class="headerlink" title="4.2 常用功能"></a>4.2 常用功能</h3><blockquote><p>Arrays的相关功能需要import java.util.Arrays;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tostring是把数组内容转换为字符串显示的方法</span></span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.sort(b);<span class="comment">//排序</span></span><br><span class="line">System.out.println(Arrays.toString(b));</span><br><span class="line"><span class="comment">//输出[0, 5, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="5">5.Java的面向对象</h2><p>封装、多态、继承的特性<br>向上转型、向下转型<br>String类、   equals（）比较<br>方法重载、方法重写各自的特点以及相互的区别<br>抽象类的继承<br>接口的实现方法<br>内部类的定义及使用</p><h3 id="5-1-面向对象"><a href="#5-1-面向对象" class="headerlink" title="5.1 面向对象"></a>5.1 面向对象</h3><blockquote><p>面向对象老生常谈三大特性：封装、继承、多态</p></blockquote><h3 id="5-1-封装"><a href="#5-1-封装" class="headerlink" title="5.1 封装"></a>5.1 封装</h3><blockquote><p>为了“隐藏细节”和“数据安全”利用抽象数据类型把数据和基于数据的操作封装起来，使其成为一个不可分割的整体，数据隐藏在抽象数据内部，尽可能的隐藏数据细节，只保留一些接口使其与外界发生联系。也就是说用户无需知道内部的数据和方法的具体实现细节，只需根据留在外部的接口进行操作就行。</p></blockquote><p>典型实现：private修饰的数据+public修饰的get、set方法。</p><h3 id="5-2-继承"><a href="#5-2-继承" class="headerlink" title="5.2 继承"></a>5.2 继承</h3><blockquote><p>多个类具有共同的属性（成员变量）与行为（成员方法）的时候，将这些共同的部分抽取出来定义到一个公共的类中，其他及各类可以与这个公共的类形成继承关系，从而在多个类中不需要重复定义公共部分!这个公共的类就是父类，也称为超类或者基类，其他的类就是子类。</p></blockquote><ol><li>父类的私有属性和构造方法并不能被继承。</li><li>子类可以重写父类的方法</li><li>子类必须先完成父类的初始化才能初始化</li></ol><h3 id="5-3-多态"><a href="#5-3-多态" class="headerlink" title="5.3 多态"></a>5.3 多态</h3><blockquote><p>多个类别实例调用一个同名方法却有不同实现。即一个抽象的行为对于不同的个体有不同的实现。</p></blockquote><p>多态依托封装和继承实现，也必然涉及到方法的重写。</p><h3 id="5-4-重写和重载的区别"><a href="#5-4-重写和重载的区别" class="headerlink" title="5.4 重写和重载的区别"></a>5.4 重写和重载的区别</h3><table><thead><tr><th>名字</th><th>英文</th><th>区别</th></tr></thead><tbody><tr><td>重载</td><td>Overloading</td><td>多个同名函数同时存在，具有不同的参数个数/类型</td></tr><tr><td>重写</td><td>Overriding</td><td>子类中定义某方法与其父类有相同的名称和参数</td></tr></tbody></table><p>建议重写函数上一行加上前加上@Override，类似于下面所示代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionname</span><span class="params">(params a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不加没有影响，加了更加清晰。</p><p>以下代码示例的java的多态。Base类对象能够正确的使用print()函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">Base a = <span class="keyword">new</span> Base1();</span><br><span class="line">a.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;子类函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写的特点：</p><ol><li>覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；</li><li>覆盖的方法的返回值必须和被覆盖的方法的返回一致；</li><li>覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；</li><li>被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</li></ol><p>静态方法和静态属性不能被重写，只能被继承。</p><h3 id="5-5-动态绑定与静态绑定"><a href="#5-5-动态绑定与静态绑定" class="headerlink" title="5.5 动态绑定与静态绑定"></a>5.5 动态绑定与静态绑定</h3><p>提及重写就不得不提动态绑定，动态绑定仅针对对象的方法而言。</p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>静态绑定</td><td>程序编译期的绑定</td></tr><tr><td>动态绑定</td><td>在运行时根据具体对象的类型进行绑定</td></tr></tbody></table><p>动态绑定的实现依靠JVM维持的一个叫做方法表的数据结构。</p><h2 id="6">6.Java的异常（exception）</h2><h3 id="6-1-异常的分类"><a href="#6-1-异常的分类" class="headerlink" title="6.1 异常的分类"></a>6.1 异常的分类</h3><p>异常处理被设计用于保证代码的质量，降低后期维护的难度和便于开发过程中的测试。</p><p>java的异常被当做对象处理，根类是java.lang.Throwable类，并分为两大类：</p><table><thead><tr><th>类别</th><th>是否可处理</th><th>遇到后的操作</th></tr></thead><tbody><tr><td>Error</td><td>无法处理</td><td>JVM会选择终止程序</td></tr><tr><td>Exception</td><td>可以处理</td><td>人为编写代码捕获异常并处理</td></tr></tbody></table><p>java的异常一览：</p><pre class="mermaid">graph TDA[throwable] --> B[Error]A --> C[Exception]C[Exception] --> D[unchecked exception]C[Exception] --> E[checked exception]</pre><p>关于Exception的下属分类说明见下表：</p><table><thead><tr><th>名字</th><th>中文</th><th>又称</th></tr></thead><tbody><tr><td>unchecked exception</td><td>非检查异常</td><td>运行时异常（RuntimeException）</td></tr><tr><td>checked exception</td><td>检查异常</td><td>非运行时异常（运行时异常以外的都是）</td></tr></tbody></table><p>对于Exception的下属分类的异常是否需要处理见下表：</p><table><thead><tr><th>名字</th><th>是否需要处理</th><th>对应操作</th><th>例子</th></tr></thead><tbody><tr><td>运行时异常</td><td>可以不处理</td><td>由虚拟机接管</td><td>NullPointerException</td></tr><tr><td>非运行时异常</td><td>必须处理</td><td>程序员自己写catch块</td><td>IOExeption</td></tr></tbody></table><p>简言之：java编译器<b>强制程序员必须进行对非运行时异常捕获处理</b>。</p><h3 id="6-2-Throw语句"><a href="#6-2-Throw语句" class="headerlink" title="6.2 Throw语句"></a>6.2 Throw语句</h3><p>java的异常不仅可以由系统产生，也可以由程序员书写代码自行抛出。</p><blockquote><p>为了自行抛出异常，您应当使用throw语句。</p></blockquote><p>throw是这样工作的：</p><ol><li>创建一个异常对象。该对象可以由用户写入一些异常相关的信息。</li><li>将这个异常对象传给调用者并结束当前方法的执行。</li></ol><p>另外，当方法的调用者也无法处理异常时应当继续抛出，直到主函数抛给JVM这里是不用人为进行处理的，但是在用户自己编写的语句若无法处理是应当进一步抛出的。</p><p>请注意，throw仅能够抛出可抛出类Throwable或者其子类的实例对象。类似于下面的代码是不对的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> String(<span class="string">&quot;exception&quot;</span>);</span><br></pre></td></tr></table></figure><p>此外，父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出。</p><p>throw语句的使用请结合下一小节的第一个实例。</p><h3 id="6-3-异常的捕获"><a href="#6-3-异常的捕获" class="headerlink" title="6.3 异常的捕获"></a>6.3 异常的捕获</h3><p>在Java中如果需要处理异常，必须先对异常进行捕获。</p><blockquote><p>为了捕获异常，您应当使用try和catch关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            File a = <span class="keyword">new</span> File(<span class="string">&quot;/a.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(a.exists() == <span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;Cannot find &quot;</span>+a.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;the code after throw is running!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[NullPointerException]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[Exception] &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// catch(FileNotFoundException e)&#123;</span></span><br><span class="line">        <span class="comment">//     System.out.println(&quot;[Exception] &quot; + e.getMessage());</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：<br>[Exception] Cannot find a.txt<br>程序运行完毕</p></blockquote><p>关于以上程序，不难看出如下关键：</p><ol><li>throw一旦抛出则不会执行后面的代码，而是返回上一层，这里的上一层是try-catch语句。</li><li>多数异常可以由用户写入一些字符串作为自定义的信息</li><li>抛出的异常会在catch块中依次进行匹配，遇到合适的则运行其中的代码，并且忽略掉后续连着的所有catch块</li></ol><p>请思考这样一个问题：如果把注释去掉还能否编译？</p><p>如果您尝试编译，会发现类似这样的错误提示：</p><blockquote><p>Unreachable catch block for FileNotFoundException. It is already handled by the catch block for IOException</p></blockquote><p>因为FileNotFoundException是IOException的子类，所以FileNotFoundException本身也可以由IOException接收（多态性）。</p><p>因此有这样一条忠告:<b>如果多个catch块中的异常出现继承关系，父类异常catch块放在最下面</b>。</p><p>或者您还可以这样理解：把异常范围小的放在前面，范围大的放在后面。</p><p>更保险的做法是在最后一个catch里面放Exception这个异常的根类。</p><h3 id="6-4-try关键字的细节"><a href="#6-4-try关键字的细节" class="headerlink" title="6.4 try关键字的细节:"></a>6.4 try关键字的细节:</h3><p>try关键字用来包围可能会出现异常的逻辑代码，它<b>无法单独使用</b>，必须配合catch或者finally使用。</p><p>对于一个try，可以有多个catch块但是最多有一个finally块。根据需要，可以不使用任何finally块，但是finally块本身如果存在是任何情况下都是会执行的。</p><ol><li>可以有多个catch块吗？<blockquote><p>可以</p></blockquote></li><li>存在多个catch块时，会使用哪一个？<blockquote><p>按照书写catch块的先后顺序进行匹配，当一个catch块匹配成功则不会和后面的匹配。</p></blockquote></li><li>可以有多个finally块吗？<blockquote><p>不可以，try块也可以有零个或一个finally块。</p></blockquote></li><li>catch和finally块能够同时存在吗？<blockquote><p>可以</p></blockquote></li><li>finally块作用是什么？<blockquote><p>因为异常引发的程序跳转导致有些语句会执行不到，因此使用finally确保某些语句一定会被执行，例如一些创建后应当释放/销毁/关闭的资源，比如流。</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try-catch-finally块的使用格式</span></span><br><span class="line"><span class="keyword">try</span>  &#123;</span><br><span class="line">    <span class="comment">// Code for try block</span></span><br><span class="line">    <span class="comment">//可能会产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception1 e1)  &#123;</span><br><span class="line">    <span class="comment">// Code for catch block</span></span><br><span class="line">    <span class="comment">//记录日志、打印异常信息、继续抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>  &#123;</span><br><span class="line">    <span class="comment">// Code for finally block</span></span><br><span class="line">    <span class="comment">//无论异常是否发生，都需要执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是拿上面的例子进行修改以演示finally块的作用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            File a = <span class="keyword">new</span> File(<span class="string">&quot;/a.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(a.exists() == <span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;Cannot find &quot;</span>+a.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;the code after throw is running!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[NullPointerException]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[Exception] &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally块代码运行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：<br>[Exception] Cannot find a.txt<br>finally块代码运行<br>程序运行完毕</p></blockquote><h3 id="6-5-出现在方法声明中的throws"><a href="#6-5-出现在方法声明中的throws" class="headerlink" title="6.5 出现在方法声明中的throws"></a>6.5 出现在方法声明中的throws</h3><blockquote><p>请区分throws和throw的区别，它俩是不一样的。</p></blockquote><p>throws表示出现异常的一种可能性，并不一定会发生这些异常。这些异常将交由该方法的调用者处理，并且允许throws后面跟多个异常类型。</p><h2 id="7">7.Java的窗体设计</h2><h3 id="7-1-基础示例"><a href="#7-1-基础示例" class="headerlink" title="7.1 基础示例"></a>7.1 基础示例</h3><blockquote><p>使用顶层容器JFrame设计窗体，您需要import javax.swing.JFrame。具有Swing GUI的应用必须至少拥有一个顶层容器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line"><span class="comment">//新建JFrame</span></span><br><span class="line">JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">&quot;no title&quot;</span>);</span><br><span class="line"><span class="comment">//设置JFrame的大小</span></span><br><span class="line">frame.setSize(<span class="number">480</span>, <span class="number">320</span>);</span><br><span class="line"><span class="comment">//设置JFrame居中</span></span><br><span class="line">frame.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//设置当框架关闭时结束程序</span></span><br><span class="line">frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">//设置JFrame可见</span></span><br><span class="line">frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//创建按钮</span></span><br><span class="line">JButton button = <span class="keyword">new</span> JButton(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"><span class="comment">//向frame中添加一个按钮</span></span><br><span class="line">frame.add(button);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，可以在屏幕中央获得一个大小为480*320的窗口，并且有一个按钮填满其中，按钮上显示的文字是”text”。</p><h3 id="7-2-布局方式"><a href="#7-2-布局方式" class="headerlink" title="7.2 布局方式"></a>7.2 布局方式</h3><table><thead><tr><th>布局</th><th>方式</th></tr></thead><tbody><tr><td>FlowLayout流式布局</td><td>从左到右，从上到下逐行摆放</td></tr><tr><td>GridLayout网格布局</td><td>容器划分为m行n列的单元格，每个单元格容纳一个组件</td></tr><tr><td>BorderLayout边框布局</td><td>按照相对方位摆放，比如说摆在“北边”</td></tr><tr><td>CradLayout卡片布局</td><td>类似于一摞牌，只有最上面的可以显示（或者想象成图层）</td></tr><tr><td>GridBagLayout网格包布局</td><td>网格布局升级版，允许合并单元格和设置格中相对位置</td></tr><tr><td>BoxLayout箱式布局</td><td>垂直摆一列或者横着码一行</td></tr></tbody></table><ol><li>以上六种布局无法手动设置组件大小与位置</li><li>为了手动设置组件大小和位置请使用setLayout(null)</li><li>CradLayout一般使用Panel作为中间组件，容纳不同的布局，然后在不同Panel之间切换</li></ol><h2 id="8-杂项"><a href="#8-杂项" class="headerlink" title="8 杂项"></a>8 杂项</h2><h3 id="8-1-接口"><a href="#8-1-接口" class="headerlink" title="8.1 接口"></a>8.1 接口</h3><blockquote><p>c++抽象类，见过不？差不多的东西，它也具有一大部分类的特征，比如说可以有方法和属性。但是接口只是定义方法的输入输出啥的特征，不规定如何具体实现。</p></blockquote><p>接口只包括常量和抽象方法</p><ul><li>常量: 默认使用 public static final</li><li>方法: 默认使用 public abstract</li></ul><p>关于抽象方法：抽象方法只能存在于抽象类或者接口中，但抽象类中却能存在非抽象方法，即有方法体的方法。接口是百分之百的抽象类</p><p>Java提供了一个用于比较的接口Comparable</p><p>接口和抽象类的区别：抽象类内部可能包含非final的变量，但是在接口中存在的变量一定是final，public,static的。</p><p>您需要注意如下内容：</p><ol><li>接口单放一个.java文件且与文件名同名</li><li>实现接口内部的方法，必须要有public关键字（不写，就是private，不能给它访问性降级）</li><li>接口中final修饰的变量自带static属性（即便你没有写出来static)</li><li>final修饰的方法不能够被子类重写</li><li>接口可以多继承</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in1.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">in1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(d.a);</span><br><span class="line">        in1 e = <span class="keyword">new</span> d();<span class="comment">//这里使用in1是为了演示使用一个接口引用指向对象也是可以的</span></span><br><span class="line">        e.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">d</span> <span class="keyword">implements</span> <span class="title">in1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>2<br>2</p></blockquote><h3 id="8-2-抽象类"><a href="#8-2-抽象类" class="headerlink" title="8.2 抽象类"></a>8.2 抽象类</h3><blockquote><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p></blockquote><ol><li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li><li>抽象类不能实例化对象</li><li>abstract修饰的方法不要写函数体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        noabc s = <span class="keyword">new</span> noabc();</span><br><span class="line">        s.print();<span class="comment">//输出：0</span></span><br><span class="line">        s.add(<span class="number">2</span>);</span><br><span class="line">        s.print();<span class="comment">//输出：2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">abc</span></span>&#123;</span><br><span class="line">    <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">noabc</span> <span class="keyword">extends</span> <span class="title">abc</span></span>&#123;</span><br><span class="line">    <span class="comment">//子类，非抽象类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">        a+=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-向下转型、向上转型"><a href="#8-3-向下转型、向上转型" class="headerlink" title="8.3 向下转型、向上转型"></a>8.3 向下转型、向上转型</h3><table><thead><tr><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>向上转型</td><td>父类引用指向子类对象并调用父类中定义的方法和变量</td></tr><tr><td>向下转型</td><td>调用子类特有的属性/方法</td></tr></tbody></table><p>摘一段csdn网友 @油炸小波 的</p><p>如父类Animal，子类Cat,Dog。其中Animal可以是类也可以是接口，Cat和Dog是继承或实现Animal的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>声明的是父类，实际指向的是子类的一个对象。</p><p>理解多态，首先要知道“向上转型”。</p><p>我定义了一个子类Cat，它继承了Animal类，那么后者就是前者是父类。我可以通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>实例化一个Cat的对象，这个不难理解。但当我这样定义时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>这代表什么意思呢？ 很简单，它表示我定义了一个Animal类型的引用，指向新建的Cat类型的对象。</p><p>由于Cat是继承自它的父类Animal，所以Animal类型的引用是可以指向Cat类型的对象的。这就是“向上转型”。</p><p>那么这样做有什么意义呢？因为子类是对父类的一个改进和扩充，所以一般子类在功能上较父类更强大，属性较父类更独特</p><p>定义一个父类类型的引用指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。</p><p>所以，父类类型的引用可以调用父类中定义的所有属性和方法，而对于子类中定义而父类中没有的方法， 父类引用是无法调用的 ；</p><p>【具体的意思就是：现在Cat继承自Animal，Cat里面对于父类的方法进行了扩充和更强大的定义，通过向上转型调用这些强大的方法，但是对于子类定义父类没有的方法，向上转型不能使用】</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李二狗的C++备考笔记</title>
      <link href="/2021/12/20/NoteofCpp/"/>
      <url>/2021/12/20/NoteofCpp/</url>
      
        <content type="html"><![CDATA[<h1 id="BinaryDog-Lee’s-Note-of-C"><a href="#BinaryDog-Lee’s-Note-of-C" class="headerlink" title="BinaryDog Lee’s Note of C++"></a>BinaryDog Lee’s Note of C++</h1><blockquote><p>作者数媒李二狗。（P.S.能不能star一下…）</p></blockquote><h2 id="catalogue"><a href="#catalogue" class="headerlink" title="catalogue"></a>catalogue</h2><p><a href="#1">1.函数默认值和函数重载</a></p><p><a href="#2">2. 应用new/delete运算符实现深复制</a></p><p><a href="#3">3. 引用传递参数</a></p><p><a href="#4">4. 对象构造/析构的顺序</a></p><p><a href="#5">5. 基类派生类各种形态的赋值兼容、虚函数的静态、动态关联</a></p><p><a href="#6">6. 格式化I/O的常用格式标志位、成员函数和流操纵算子</a></p><p><a href="#7">7. 函数模板（结合数组的基本算法）</a></p><p><a href="#8">8. 构造函数/默认构造函数的定义、常用运算符函数的重载及应用、对象数组</a></p><p><a href="#9">9. string、vector等基本容器类结合find、erase等基本算法的应用</a></p><p><a href="#10">10. 类及常用成员函数的定义，类的复合关系的应用</a></p><p><a href="#11">11. 多态性的应用，要求用类图分析类及继承关系，要求抽象基类、动态多态性</a></p><p><a href="#12">12. 个人见到的一些琐碎知识点</a></p><h2 id="detail"><a href="#detail" class="headerlink" title="detail"></a>detail</h2><blockquote><p>以下代码均在devcpp的TDM-GCC4.8.1 64-bit Debug下运行成功</p></blockquote><h2 id="1">1.函数默认值和函数重载</h2><h3 id="1-1函数默认值"><a href="#1-1函数默认值" class="headerlink" title="1.1函数默认值"></a>1.1函数默认值</h3><blockquote><p>部分样例取自cppreference，下文不再标注</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数名：“isodd”</span></span><br><span class="line"><span class="comment">// 形参列表拥有一个形参，具有名字 “n” 和类型 int</span></span><br><span class="line"><span class="comment">// 返回类型是 bool</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isodd</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;                      <span class="comment">// 函数体开始</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>通俗地讲，形参就是在这个函数体内，管这个传入的参数叫什么</p><p>而实参就是调用这个函数时，传入的参数它本身的名字</p><p>比如说在某处有程序段如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> b = <span class="built_in">isodd</span>(a);</span><br></pre></td></tr></table></figure><p>这里a这个传入的参数就是<b>实参（argument）</b>，结合上面的函数定义知形参是n</p><p>这种传递参数方式叫做<b>值传递</b>，只是把参数的值传递了过去，内存中形参n的地址和实参a的地址是<b>不一样的</b></p><p>函数的默认值写在函数<b>形参列表</b>中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">1</span>,<span class="keyword">int</span> c = <span class="number">7</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sum</span>(<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>)&lt;&lt;endl;<span class="comment">//输出9，相当于5+3+1</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">sum</span>(<span class="number">5</span>,<span class="number">3</span>)&lt;&lt;endl;<span class="comment">//输出15，相当于5+3+7</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">sum</span>(<span class="number">5</span>)&lt;&lt;endl;<span class="comment">//输出13，相当于5+1+7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码sum后面的形参列表看起来像是赋值的地方就是指定默认值</p><p>不可能存在参数列表中多个参数里，前面的参数没有使用默认值而后面参数没有使用默认值的情况，例如sum(5)的5就是传给了a而非后面的参数</p><h3 id="1-2函数重载"><a href="#1-2函数重载" class="headerlink" title="1.2函数重载"></a>1.2函数重载</h3><blockquote><p>同一作用域中，可以有多个函数拥有相同的名称，只要其形参列表，以及对于非静态成员函数的 cv 或引用 (C++11 起)限定不同即可。这被称作函数重载</p></blockquote><p>通俗的说就是重载函数的参数个数，参数类型或参数顺序三者中必须有一个不同</p><p>再通俗点说就是函数原型不能一样</p><p>注：同名函数只有参数表不同才能算重载。两个同名函数的参数表相同而返回值类型不同不是重载，而是重复定义，是不允许的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sum</span>(<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sum</span>(<span class="number">5</span>,<span class="number">3</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图两个sum函数原型分别是int sum(int,int,int)和int sum(int,int)</p><p>直观上的感受就是两个名字一样的函数，功能却不相同</p><h2 id="2">2. 应用new/delete运算符实现深复制</h2><h3 id="2-1深复制和浅复制"><a href="#2-1深复制和浅复制" class="headerlink" title="2.1深复制和浅复制"></a>2.1深复制和浅复制</h3><blockquote><p>深拷贝和浅拷贝最根本的区别在于是否真正获取一个对象的复制实体，而不是引用。或者说是数据是否在同一块内存区域的区别。</p></blockquote><p>深复制和浅复制一般说的是面向对象中的类对象，而非诸如int、double等普通的变量。</p><p>浅复制：仅仅是指向被复制的内存地址，如果原地址发生改变，那么浅复制出来的对象也会相应的改变。</p><p>深复制：在计算机中开辟一块<b>新的内存地址</b>用于存放复制的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>* str;</span><br><span class="line"><span class="built_in">test</span>(<span class="keyword">char</span>* a)&#123;</span><br><span class="line"><span class="comment">//str=new char[strlen(a)+1];</span></span><br><span class="line"><span class="built_in">strcpy</span>(str,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">test <span class="title">var_1</span><span class="params">(<span class="string">&quot;assss&quot;</span>)</span></span>;</span><br><span class="line">var_1.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中注释行为本程序关键部分，如果注释掉本语句，则程序出现问题，原因在于char*指针<b>并未初始化</b>，它指向的值是随机的，并不能确保这个指向的位置就是可用的内存区域。</p><p>去掉注释后程序可正常运行，原因在于为var_1这个变量开辟了传入参数a大小的内存空间并让指针指向它，strlen获取的是字符串的长度，不包括结尾的\0，但是结尾的\0也要储存，所以还得在strlen(a)基础上＋1。</p><p>深复制的关键是，要正确地为指针变量开辟空间，并且在析构时<b>释放且只释放一次</b>，如果两个对象中各自的指针由于浅复制指向的是同一片内存区域，那析构时释放两次空间会出现问题。</p><h2 id="3">3. 引用传递参数</h2><p>上文提到了<b>值传递</b>，事实上参数的传递有值传递、地址传递和引用传递三种传参方式。</p><p>引用类似于指针，使用符号&amp;，这里的&amp;作用和取地址符&amp;不一样。</p><blockquote><p>引用的基本语法是：<b>数据类型 &amp;别名 = 原名</b></p></blockquote><p>引用可以作为函数返回值，例如int&amp; f(){…}就可以返回一个int的引用，但请注意<b>不要返回该函数局部变量的引用</b>，因为在返回之后就因为生命周期到了而被销毁了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapp</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;地址：&quot;&lt;&lt;&amp;a&lt;&lt;&quot; &quot;&lt;&lt;&amp;b&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">2</span>,d = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">swap</span>(c,d);</span><br><span class="line">cout&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;endl;<span class="comment">//输出2 3</span></span><br><span class="line"><span class="built_in">swapp</span>(c,d);</span><br><span class="line">cout&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;endl;<span class="comment">//输出3 2</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;地址：&quot;&lt;&lt;&amp;c&lt;&lt;&quot; &quot;&lt;&lt;&amp;d&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上程序，如果把cout的注释行加上，可以看到函数swapp的形参a和b在内存中的地址和实参c与d在内存中的地址是一样的。它们可以在一定程度上相当于一个值的两个名字。</p><h2 id="4">4. 对象构造/析构的顺序</h2><h3 id="4-1构造函数"><a href="#4-1构造函数" class="headerlink" title="4.1构造函数"></a>4.1构造函数</h3><blockquote><p>构造函数是类的一种特殊的<b>非静态成员函数</b>，用于初始化该类型的对象</p></blockquote><ol><li>如果自己不写，则会有一个默认的构造函数。如果写了则替代。</li><li>任何构造函数可以在函数定义的花括号前包含成员初始化器列表（见后文）</li><li>构造函数没有名字且无法<b>被</b>调用</li><li>基本的语法是 类名();</li><li>构造函数不可以是虚函数</li></ol><h3 id="4-2析构函数"><a href="#4-2析构函数" class="headerlink" title="4.2析构函数"></a>4.2析构函数</h3><blockquote><p>析构函数是对象生存期终结时调用的特殊成员函数。析构函数的目的是释放对象<b>可能在其生存期间获得的资源</b></p></blockquote><ol><li>基本的语法是~类名();</li><li>如果不向类提供用户提供的析构函数，编译器总是会生成一个析构函数</li><li>析构函数可以是<b>纯虚</b>的，并且常常是虚函数。</li></ol><p>调用析构函数的时间点包括：</p><ul><li>程序终止时，为静态储存期的对象析构</li><li>退出线程时，线程局部储存的对象</li><li>作用域结束</li><li>delete表达式</li><li>完整表达式结尾，对于无名变量</li><li>栈回溯</li></ul><h3 id="4-3顺序问题"><a href="#4-3顺序问题" class="headerlink" title="4.3顺序问题"></a>4.3顺序问题</h3><blockquote><p>多数情况下是：先构造，后析构，后构造，先析构，类似于栈先进后出的原则。</p></blockquote><p>派生类的构造：先执行基类的构造函数，再执行派生类的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abase</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> data_1,data_2; </span><br><span class="line"><span class="built_in">Abase</span>(<span class="keyword">int</span> a = <span class="number">4</span>,<span class="keyword">int</span> b = <span class="number">3</span>):<span class="built_in">data_1</span>(a),<span class="built_in">data_2</span>(b)&#123;</span><br><span class="line"><span class="comment">//data(a)是一个成员初始化器 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;base class constructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Abase</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;base class deconstructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aclass</span>:</span><span class="keyword">public</span> Abase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Aclass</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class constructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Aclass</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class deconstructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">Aclass* a = <span class="keyword">new</span> <span class="built_in">Aclass</span>();</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是：</p><blockquote><p>base class constructed<br>class constructed<br>class deconstructed<br>base class deconstructed</p></blockquote><h2 id="5">5. 基类派生类各种形态的赋值兼容、虚函数的静态、动态关联</h2><h3 id="5-1-赋值兼容"><a href="#5-1-赋值兼容" class="headerlink" title="5.1 赋值兼容"></a>5.1 赋值兼容</h3><blockquote><p>提示：派生类如果没有指明继承方式，则<b>默认继承方式（缺省继承方式）为private</b>，而结构体默认继承是public。</p></blockquote><blockquote><p>使用private继承，父类的protected和public属性在子类中变为private<br>使用protected继承，父类的protected和public属性在子类中变为protected<br>使用public继承，父类中的protected和public属性不发生改变</p></blockquote><ul><li>派生类对象可以赋值给基类对象</li><li>派生类对象可以初始化基类的引用</li><li>派生类对象的地址可以赋值给指向基类的指针</li></ul><p>替代之后派生类对象就可以作为基类对象使用并且只能使用从基类继承的成员</p><p>将上一节的程序改动后的示例程序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abase</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> data_1,data_2; </span><br><span class="line"><span class="built_in">Abase</span>(<span class="keyword">int</span> a = <span class="number">4</span>,<span class="keyword">int</span> b = <span class="number">3</span>):<span class="built_in">data_1</span>(a),<span class="built_in">data_2</span>(b)&#123;</span><br><span class="line"><span class="comment">//data(a)是一个成员初始化器 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;base class constructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Abase</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;base class deconstructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aclass</span>:</span><span class="keyword">public</span> Abase&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Aclass</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class constructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Aclass</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class deconstructed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">Abase* a = <span class="keyword">new</span> <span class="built_in">Aclass</span>();</span><br><span class="line"><span class="comment">//由Aclass改为Abase依然可以使用 </span></span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这体现了<b>派生类对象的地址可以赋值给指向基类的指针</b>这一点</p><h3 id="5-2虚函数的静态关联"><a href="#5-2虚函数的静态关联" class="headerlink" title="5.2虚函数的静态关联"></a>5.2虚函数的静态关联</h3><p>派生类中的数据储存区域总有一块和基类相似，这就是<b>静态关联</b>，它是上文讲到的派生类对象的地址可以赋值给指向基类的指针的基础。</p><p>当把派生类对象的地址赋值给基类指针时，会自动进行指针类型转换，将派生类对象的地址转换为基类指针，然后基类指针<b>只指向其中的基类部分</b>，这就解释了上文“替代之后派生类对象就可以作为基类对象使用并且只能使用从基类继承的成员”这句话。</p><h3 id="5-3动态关联的前置内容"><a href="#5-3动态关联的前置内容" class="headerlink" title="5.3动态关联的前置内容"></a>5.3动态关联的前置内容</h3><p>动态关联之前需要了解<b>同名覆盖</b></p><p>同名覆盖就是一种函数重载，在基类和派生类中同名同类型同参数的一个函数，派生类的会代替基类的，也就是说<b>不能使用这个函数名来来调用基类的函数</b>，因为该同名函数指向的是派生类中的定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class a&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class b&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">a.<span class="built_in">f</span>();<span class="comment">//输出class a</span></span><br><span class="line">b.<span class="built_in">f</span>();<span class="comment">//输出class b</span></span><br><span class="line">b.A::<span class="built_in">f</span>();<span class="comment">//输出class a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要调用基类的则需加上作用域运算符，在上例中是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.A::<span class="built_in">f</span>();</span><br></pre></td></tr></table></figure><h3 id="5-4-通过虚函数实现动态关联"><a href="#5-4-通过虚函数实现动态关联" class="headerlink" title="5.4 通过虚函数实现动态关联"></a>5.4 通过虚函数实现动态关联</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class a&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class b&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">B b;</span><br><span class="line">A* p = &amp;b;</span><br><span class="line">A&amp; ab = b;</span><br><span class="line">p-&gt;<span class="built_in">f</span>();<span class="comment">//输出class a</span></span><br><span class="line">ab.<span class="built_in">f</span>();<span class="comment">//输出class a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们期望使用一个指针，访问不同类中的同名函数而不受指针类型的限制，这时候就需要虚函数来取消静态关联，来实现函数和对象的动态绑定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class a&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class b&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">B b;</span><br><span class="line">A* p = &amp;b;</span><br><span class="line">A&amp; ab = b;</span><br><span class="line">p-&gt;<span class="built_in">f</span>();</span><br><span class="line">ab.<span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上有两个改动</p><ol><li>为基类的f()添加了virtual关键字修饰</li><li>为派生类的f()添加了override关键字修饰，目的是明确该函数是虚函数而不是函数重载</li></ol><h3 id="5-5-关于动态联编"><a href="#5-5-关于动态联编" class="headerlink" title="5.5 关于动态联编"></a>5.5 关于动态联编</h3><p>动态联编是指联编在程序<b>运行时</b>（注意啊不是编译时，编译时那就是静态联编了）动态地进行，根据当时的情况来确定调用哪个同名函数，实际上是在运行时虚函数的实现。</p><p>别名：<b>晚期联编</b>或<b>动态束定</b></p><p>直观表现：对成员函数的选择是基于对象的类型，针对不同的对象类型将做出不同的编译结果。</p><p>何时使用：涉及到多态性和虚函数时应该使用动态联编。</p><p>动态联编要求派生类中的虚函数与基类中对应的虚函数具有相同的名称、相同的参数个数和相同的对应参数类型、返回值</p><h2 id="6">6. 格式化I/O的常用格式标志位、成员函数和流操纵算子</h2><blockquote><p>格式化I/O使用头文件iomanip</p></blockquote><p>格式化包括：</p><ul><li>宽度控制</li><li>对齐控制</li><li>填充控制</li><li>精度控制</li><li>进制控制</li></ul><table><thead><tr><th align="left">算子</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">setbase(int base)</td><td align="left">以base进制输出整数值</td></tr><tr><td align="left">setprecision(int n)</td><td align="left">将浮点数<b>有效数字</b>设置为n位</td></tr><tr><td align="left">setw(int n)</td><td align="left">按照n个字符来读或写</td></tr><tr><td align="left">flush</td><td align="left">刷新ostream缓冲区</td></tr><tr><td align="left">ends</td><td align="left">插入字符串结束符，然后刷新ostream缓冲区</td></tr><tr><td align="left">endl</td><td align="left">插入换行符，然后刷新ostream缓冲区</td></tr><tr><td align="left">ws</td><td align="left">跳过空白字符</td></tr><tr><td align="left">setfill(int ch）</td><td align="left">用ch填充空白字符</td></tr><tr><td align="left">dec</td><td align="left">十进制</td></tr><tr><td align="left">oct</td><td align="left">八进制</td></tr><tr><td align="left">hex</td><td align="left">十六进制</td></tr><tr><td align="left">setiosflags(long lflags)</td><td align="left">根据ios类中的枚举设置特定的格式</td></tr></tbody></table><p>ios类的枚举常量以ios::xx形式使用</p><table><thead><tr><th align="left">枚举常量</th><th align="left">用途</th><th align="left">枚举常量</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">skipws</td><td align="left">跳过空格</td><td align="left">showbase</td><td align="left">显示基指示符</td></tr><tr><td align="left">left</td><td align="left">左对齐</td><td align="left">showpoint</td><td align="left">输出小数尾数0</td></tr><tr><td align="left">right</td><td align="left">右对齐</td><td align="left">uppercase</td><td align="left">十六进制大写</td></tr><tr><td align="left">internal</td><td align="left">符号左对齐，数值右对齐</td><td align="left">showpos</td><td align="left">输出正数符号</td></tr><tr><td align="left">dec</td><td align="left">十进制</td><td align="left">scientific</td><td align="left">科学计数法</td></tr><tr><td align="left">oct</td><td align="left">八进制</td><td align="left">fixed</td><td align="left">小数按定点表示</td></tr><tr><td align="left">hex</td><td align="left">十六进制</td><td align="left"></td><td align="left"></td></tr></tbody></table><p>示例程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> n = <span class="number">114514</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">114.5141919810</span>;</span><br><span class="line">cout&lt;&lt;n&lt;&lt;endl&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">4</span>)&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：<br>114514<br>↔↔↔↔114514<br>114.514<br>114.5<br>注:使用↔来表示空格，以使结果更加直观清晰</p></blockquote><p>显然第二行的114514加上前面的空格刚好凑齐设置的域宽10。</p><p>注意：setw<b>只作用于紧随其后的部分</b>，例如输出114.514那行并没有被上一行的setw作用到</p><h2 id="7">7. 函数模板（结合数组的基本算法）</h2><h3 id="7-1函数模板"><a href="#7-1函数模板" class="headerlink" title="7.1函数模板"></a>7.1函数模板</h3><blockquote><p>基础用法是template&lt;形参列表&gt; 常规的函数声明</p></blockquote><p><b>为什么要使用函数模板？</b></p><p>一个典型的场景是，我们有一个计算交换函数swap，可以交换两个参数的值。如果我们写作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a,<span class="keyword">int</span>&amp; b)</span></span>;</span><br></pre></td></tr></table></figure><p>那这只能交换int类型的变量。但是如果想交换float类型、double类型等变量，就需要写多个函数，看到这里虽然已经掌握了函数重载，但是显然这不是最优的解决方案。</p><p>随着需要处理的数据类型的增加，代码会变得庞大而冗余</p><p>我们不期望反复写多个相似的函数及其定义，而希望寻求一种高效的解决方案。</p><p>所以我们使用函数模板来使代码更加简洁和高效，以及获得更强的重用性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_1</span><span class="params">(T&amp; a,T&amp; b)</span></span>&#123;</span><br><span class="line"><span class="comment">//void swap(int&amp; a,int&amp; b)&#123;</span></span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addup</span><span class="params">(T&amp; a,T&amp; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>,b = <span class="number">3</span>,c = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">char</span> f = <span class="string">&#x27;f&#x27;</span>,d = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">cout&lt;&lt;addup&lt;<span class="keyword">int</span>&gt;(a,b)&lt;&lt;endl;<span class="comment">//12</span></span><br><span class="line">cout&lt;&lt;addup&lt;<span class="keyword">int</span>&gt;(c,b)&lt;&lt;endl;<span class="comment">//22</span></span><br><span class="line"><span class="built_in">swap_1</span>(d,f);</span><br><span class="line">cout&lt;&lt;d&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;f&lt;&lt;endl;<span class="comment">//f d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<b>类成员函数模板不能是虚函数</b>，这与虚函数表有关，因为我们需要再解析一个类之前确定其虚函数表大小，但是模板函数只有实例化之后才能确定大小，进而确定虚函数表的大小。但是虚函数表是在类实例化之前就确定的，这与之冲突</p><h3 id="7-2-数组参数的函数模板"><a href="#7-2-数组参数的函数模板" class="headerlink" title="7.2 数组参数的函数模板"></a>7.2 数组参数的函数模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T(&amp;arr))</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">cout&lt;&lt;arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arraysort</span><span class="params">(T(&amp;arr),<span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line"><span class="comment">//flag==true时升序排列</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag&amp;&amp;(arr[j]&gt;arr[j+<span class="number">1</span>]))&#123;</span><br><span class="line"><span class="built_in">swap</span>(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!flag&amp;&amp;(arr[j+<span class="number">1</span>]&gt;arr[j])) &#123;</span><br><span class="line"><span class="built_in">swap</span>(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">arraysort</span>(a,<span class="literal">true</span>);<span class="comment">//升序排列</span></span><br><span class="line"><span class="built_in">print</span>(a);<span class="comment">//输出0 1 2 3 4</span></span><br><span class="line"><span class="built_in">arraysort</span>(a,<span class="literal">false</span>);<span class="comment">//降序排列</span></span><br><span class="line"><span class="built_in">print</span>(a);<span class="comment">//输出4 3 2 1 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数模板中传数组一定要传引用，不然类型推导时传数组会退化为指针，无法正确获取数据，甚至求数组大小n都无法求。</p><h3 id="7-3-实际运用"><a href="#7-3-实际运用" class="headerlink" title="7.3 实际运用"></a>7.3 实际运用</h3><p>犯懒，把我作业三的代码粘过来了。</p><blockquote><p>题目：自定义函数模板对有 n 个元素的数组 a 排序，并把排序准则设置成函数参数。 </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ohhhmygod</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//前者 a&gt;后者 b 返回 1 以进行冒泡排序的交换 是递增排序</span></span><br><span class="line"><span class="comment">//要是搞递减就把下面的大于改成小于</span></span><br><span class="line"><span class="keyword">return</span> a&gt;b?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_sort</span><span class="params">(T *a, <span class="keyword">int</span> n, <span class="keyword">int</span> (*p)(T, T))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//不难 就是模板函数指针 类似 c#的委托</span></span><br><span class="line"><span class="comment">//传参时需要模板实例化一下</span></span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span>;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">int</span> nn = n; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;(i&lt;nn<span class="number">-1</span>)?<span class="literal">true</span>:(i=<span class="number">0</span>,--nn,(i&lt;nn<span class="number">-1</span>)?<span class="literal">true</span>:<span class="literal">false</span>);++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//冒泡排序，写一个for纯粹是为了好玩</span></span><br><span class="line"><span class="keyword">if</span>((*p)(a[i],a[i+<span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line">temp = a[i];</span><br><span class="line">a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">a[i+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>]=&#123;<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">my_sort</span>(a,<span class="number">4</span>,ohhhmygod&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"><span class="built_in">my_sort</span>(s,<span class="number">5</span>,ohhhmygod&lt;<span class="keyword">char</span>&gt;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(a)/<span class="built_in"><span class="keyword">sizeof</span></span>(a[<span class="number">0</span>]);++i)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(s)/<span class="built_in"><span class="keyword">sizeof</span></span>(s[<span class="number">0</span>]);++i)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;s[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8">8. 构造函数/默认构造函数的定义、常用运算符函数的重载及应用、对象数组</h2><h3 id="8-1构造函数-默认构造函数"><a href="#8-1构造函数-默认构造函数" class="headerlink" title="8.1构造函数/默认构造函数"></a>8.1构造函数/默认构造函数</h3><p>见第四节</p><h3 id="8-2-常用运算符重载及应用"><a href="#8-2-常用运算符重载及应用" class="headerlink" title="8.2 常用运算符重载及应用"></a>8.2 常用运算符重载及应用</h3><p>常见运算符重载分为</p><ol><li>使用外部函数进行运算符重载</li><li>使用成员函数进行运算符重载</li></ol><p>重载的适用运算符：</p><ul><li>只能作为类成员函数重载的运算符有：() 、[] 、-&gt; 、=</li><li>不能被重载的运算符有：. 、.* 、:: 、?: 、sizeof</li></ul><p>要调用运算符重载函数，有两种方法</p><ul><li>一种是通过函数名调用，即operator+(t1,t2)</li><li>另一种是在使用运算符的时候自动调用</li></ul><p>对于二元运算符：</p><p>如果是非成员函数重载，它是不知道调用者是谁的，因此需要传<b>两个参数</b>，一个是调用者，另一个是参与运算的。</p><p>如果作为成员函数重载运算符，是知道调用者是谁的，因此只需要<b>一个参数</b>，即另一个参与运算的数据参数。</p><p>对于一元运算符：</p><p>（我说的就是自增与自减）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Returntype <span class="keyword">operator</span>++();<span class="comment">//前缀自增</span></span><br><span class="line">Returntype <span class="keyword">operator</span>++(<span class="keyword">int</span>);<span class="comment">//后缀自增</span></span><br><span class="line"><span class="comment">//int在括号是为了向编译器说明这是一个后缀形式，而不是表示整数。</span></span><br><span class="line"><span class="comment">//这个形参是0，但是在函数体中用不到，只是为了区分前置后置而已。</span></span><br></pre></td></tr></table></figure><p>注：递增和递减一般是对改变对象的状态，所以一般是重载为成员函数。</p><p>以下代码摘录自头歌，为自定义Int类重载函数，其中的运算符重载已经非常值得借鉴了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INT_H_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Int</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> value;   </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Int</span>():<span class="built_in">value</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Int</span>(Int <span class="keyword">const</span>&amp;rhs):<span class="built_in">value</span>(rhs.value)&#123;&#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="keyword">int</span> v):<span class="built_in">value</span>(v)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> value;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;value=v;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (Int <span class="keyword">const</span>&amp;rhs);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> != (Int <span class="keyword">const</span>&amp;rhs);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Int <span class="keyword">const</span>&amp;rhs);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (Int <span class="keyword">const</span>&amp;rhs);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (Int <span class="keyword">const</span>&amp;rhs);</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (Int <span class="keyword">const</span>&amp;rhs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">bool</span> Int::<span class="keyword">operator</span> ==(Int <span class="keyword">const</span>&amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> value == rhs.<span class="built_in">getValue</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Int::<span class="keyword">operator</span> !=(Int <span class="keyword">const</span>&amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">operator</span> == (rhs));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Int::<span class="keyword">operator</span> &lt;(Int <span class="keyword">const</span>&amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; rhs.<span class="built_in">getValue</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Int::<span class="keyword">operator</span> &lt;=(Int <span class="keyword">const</span>&amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">operator</span> &lt; (rhs) || <span class="keyword">operator</span> == (rhs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Int::<span class="keyword">operator</span> &gt;(Int <span class="keyword">const</span>&amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">operator</span> &lt; (rhs) || <span class="keyword">operator</span> == (rhs));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Int::<span class="keyword">operator</span> &gt;=(Int <span class="keyword">const</span>&amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">operator</span> &lt; (rhs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3对象数组"><a href="#8-3对象数组" class="headerlink" title="8.3对象数组"></a>8.3对象数组</h3><p>顾名思义，就是存放类实例化数据的数组。会依次为每个对象调用构造函数，如果初始化列表的长度小于对象的数量，则任何剩余的对象都将由默认构造函数初始化（下例中s[2]就是由默认的构造函数构造的）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">Point</span>(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; y = &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point s[<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line">s[<span class="number">0</span>].<span class="built_in">print</span>();<span class="comment">//x = 1 y = 3</span></span><br><span class="line">s[<span class="number">1</span>].<span class="built_in">print</span>();<span class="comment">//x = 2 y = 7</span></span><br><span class="line">s[<span class="number">2</span>].<span class="built_in">print</span>();<span class="comment">//x = 0 y = 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以显示调用构造函数并且使用缺省构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">Point</span>(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; y = &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Point s[3] = &#123;&#123;1,3&#125;,&#123;2,7&#125;&#125;;</span></span><br><span class="line">Point s[<span class="number">3</span>] = &#123;<span class="built_in">Point</span>(<span class="number">1</span>,<span class="number">3</span>),<span class="built_in">Point</span>(<span class="number">7</span>)&#125;;</span><br><span class="line">s[<span class="number">0</span>].<span class="built_in">print</span>();<span class="comment">//x = 1 y = 3</span></span><br><span class="line">s[<span class="number">1</span>].<span class="built_in">print</span>();<span class="comment">//x = 7 y = 0</span></span><br><span class="line">s[<span class="number">2</span>].<span class="built_in">print</span>();<span class="comment">//x = 0 y = 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7大关键点（摘自C语言中文网）</p><ol><li>数组的元素可以是对象。</li><li>如果在创建对象数组时未使用初始化列表，则会为数组中的每个对象调用默认构造函数。</li><li>没有必要让数组中的所有对象都使用相同的构造函数。</li><li>如果在创建对象数组时使用初始化列表，则将根据所使用参数的数量和类型为每个对象用正确的构造函数。</li><li>如果构造函数需要多个参数，则初始化项必须釆用构造函数调用的形式。</li><li>如果列表中的初始化项调用少于数组中的对象，则将为所有剩余的对象调用默认构造函数。</li><li>最好总是提供一个默认的构造函数。如果没有，则必须确保为数组中的每个对象提供一个初始化项。</li></ol><h2 id="9">9. string、vector等基本容器类结合find、erase等基本算法的应用</h2><h3 id="9-1-string"><a href="#9-1-string" class="headerlink" title="9.1 string"></a>9.1 string</h3><blockquote><p>使用string相关内容，你需要包含string头文件</p></blockquote><p>string的特性：</p><ul><li>string直接支持字符串连接</li><li>string直接支持字符串的大小比较</li><li>string直接支持子串查找和提取</li><li>string直接支持字符串的插入和替换</li><li>string同时具备字符串数组的灵活性,可以通过[ ]重载操作符来访问每个字符。</li></ul><p>string类常用构造函数(摘自@诺谦)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string str;        <span class="comment">//生成一个空字符串</span></span><br><span class="line"><span class="function">string <span class="title">str</span> <span class="params">(<span class="string">&quot;ABC&quot;</span>)</span>  <span class="comment">//等价于 str=&quot;ABC&quot;&lt;br&gt;</span></span></span><br><span class="line"><span class="function">string <span class="title">str</span> <span class="params">(<span class="string">&quot;ABC&quot;</span>, strlen)</span>  <span class="comment">// 将&quot;ABC&quot;存到str里,最多存储前strlen个字节</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ABC&quot;</span>,stridx,strlen)</span>   <span class="comment">//将&quot;ABC&quot;的stridx位置,做为字符串开头,存到str里.且最多存储strlen个字节.</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(strlen, <span class="string">&#x27;A&#x27;</span>)</span>  <span class="comment">//存储strlen个&#x27;A&#x27;到str里</span></span></span><br></pre></td></tr></table></figure><p>string类常用的成员函数有:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1.<span class="built_in">assign</span>(<span class="string">&quot;ABC&quot;</span>);　　　　　　　　<span class="comment">//清空string串,然后设置string串为&quot;ABC&quot;</span></span><br><span class="line">str1.<span class="built_in">length</span>()；                   <span class="comment">//获取字符串长度</span></span><br><span class="line">str1.<span class="built_in">size</span>();　　　　　　　　　　　 <span class="comment">//获取字符串数量,等价于length()</span></span><br><span class="line">str1.<span class="built_in">capacity</span>();　　　　　　　　  <span class="comment">//获取容量,容量包含了当前string里不必增加内存就能使用的字符数</span></span><br><span class="line">str1.<span class="built_in">resize</span>(<span class="number">10</span>);　　　　　　      <span class="comment">//表示设置当前string里的串大小,若设置大小大于当前串长度,则用字符\0来填充多余的.</span></span><br><span class="line">str1.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="keyword">char</span> c);　　　　   <span class="comment">//设置串大小，若设置大小大于当前串长度,则用字符c来填充多余的</span></span><br><span class="line">str1.<span class="built_in">reserve</span>(<span class="number">10</span>);　　　　　　　　　<span class="comment">//设置string里的串容量,不会填充数据.</span></span><br><span class="line">str1.<span class="built_in">swap</span>(str2);        　　      <span class="comment">//替换str1 和 str2 的字符串</span></span><br><span class="line">str1.<span class="built_in">puch_back</span> (<span class="string">&#x27;A&#x27;</span>);    　　     <span class="comment">//在str1末尾添加一个&#x27;A&#x27;字符,参数必须是字符形式</span></span><br><span class="line">str1.<span class="built_in">append</span> (<span class="string">&quot;ABC&quot;</span>);     　　     <span class="comment">//在str1末尾添加一个&quot;ABC&quot;字符串,参数必须是字符串形式</span></span><br><span class="line">str1.<span class="built_in">insert</span> (<span class="number">2</span>,<span class="string">&quot;ABC&quot;</span>);           <span class="comment">//在str1的下标为2的位置,插入&quot;ABC&quot;</span></span><br><span class="line">str1.<span class="built_in">erase</span>(<span class="number">2</span>);         　　　　  <span class="comment">//删除下标为2的位置,比如: &quot;ABCD&quot; --&gt; &quot;AB&quot;</span></span><br><span class="line">str1.<span class="built_in">erase</span>(<span class="number">2</span>,<span class="number">1</span>);                <span class="comment">//从下标为2的位置删除1个,比如: &quot;ABCD&quot;  --&gt; &quot;ABD&quot;</span></span><br><span class="line">str1.<span class="built_in">clear</span>();           　　    <span class="comment">//删除所有</span></span><br><span class="line">str1.<span class="built_in">replace</span>(<span class="number">2</span>,<span class="number">4</span>, <span class="string">&quot;ABCD&quot;</span>);     <span class="comment">//从下标为2的位置,替换4个字节,为&quot;ABCD&quot;</span></span><br><span class="line">str1.<span class="built_in">empty</span>();         　　     <span class="comment">//判断为空, 为空返回true</span></span><br></pre></td></tr></table></figure><p>关于assign</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*assign() :赋值函数 ,里面会重新释放分配字符串内存 */</span></span><br><span class="line">str1.<span class="built_in">assign</span>(<span class="string">&quot;HELLO&quot;</span>);                   <span class="comment">//str1=&quot;HELLO&quot;</span></span><br><span class="line">str1.<span class="built_in">assign</span>(<span class="string">&quot;HELLO&quot;</span>, <span class="number">4</span>);                <span class="comment">//str1=&quot;HELL&quot; ,只保留4个字符</span></span><br><span class="line">str1.<span class="built_in">assign</span>(<span class="string">&quot;HELLO&quot;</span>, <span class="number">2</span>, <span class="number">3</span>);             <span class="comment">//str1=&quot;LLO&quot;    ,从位置2开始,只保留3个字符</span></span><br><span class="line">str1.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>);                    <span class="comment">//str1=&quot;CCCCC&quot;             //按字符赋值</span></span><br></pre></td></tr></table></figure><p>字符串的反转需要包含algorithm头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str_1 = <span class="string">&quot;1145141919810&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(str_1.<span class="built_in">begin</span>(),str_1.<span class="built_in">end</span>());</span><br><span class="line">cout&lt;&lt;str_1&lt;&lt;endl;<span class="comment">//0189191415411</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的参数是一个迭代器变量</p><p>如果期望查找其中的子串，则需要使用find方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str_1 = <span class="string">&quot;1145141919810&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> n = str_1.<span class="built_in">find</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"><span class="keyword">int</span> s = str_1.<span class="built_in">find</span>(<span class="string">&quot;419&quot;</span>);</span><br><span class="line">cout&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;s&lt;&lt;endl;<span class="comment">//7 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有必要注意的是，第一个查找传入的应当是’9’或者”9”而不是int类型的数字9。</p><p>查到子串后返回子串首字符在字符串中的下标，请注意，下标是<b>从零开始</b>计数的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//详细用法</span></span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;ABCDEFGABCD&quot;</span>)</span></span>; </span><br><span class="line">n= str.<span class="built_in">find</span>(<span class="string">&quot;BC&quot;</span>,<span class="number">1</span>);           <span class="comment">//从位置1处,查找&quot;BC&quot;,n=1;</span></span><br><span class="line">n= str.<span class="built_in">find</span>(<span class="string">&quot;CDEfg&quot;</span>,<span class="number">1</span>,<span class="number">3</span>);      <span class="comment">//从位置1处,查找&quot;CDEfg&quot;的前3个字符,等价于str.find(&quot;CDE&quot;,1),n=2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*rfind():反向(reverse)查找,从末尾处开始,向前查找*/</span></span><br><span class="line">n= str.<span class="built_in">rfind</span>(<span class="string">&quot;CD&quot;</span>);           <span class="comment">//从位置10开始向前查找,n=9</span></span><br><span class="line">n= str.<span class="built_in">rfind</span>(<span class="string">&quot;CD&quot;</span>,<span class="number">5</span>);         <span class="comment">//从位置5开始向前查找,n=2</span></span><br><span class="line">n= str.<span class="built_in">rfind</span>(<span class="string">&quot;CDEfg&quot;</span>,<span class="number">5</span>,<span class="number">3</span>);    <span class="comment">//等价于str.rfind(&quot;CDE&quot;,5);       ,所以n=2</span></span><br></pre></td></tr></table></figure><p>拷贝相关:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str2=str1.<span class="built_in">substr</span>(<span class="number">2</span>);        <span class="comment">//提取子串,提取出str1的下标为2到末尾,给str2</span></span><br><span class="line">str2=str1.<span class="built_in">substr</span>(<span class="number">2</span>,<span class="number">3</span>);     <span class="comment">//提取子串,从 str1的下标为2开始,提取3个字节给str2</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *s1= str.<span class="built_in">data</span>();   <span class="comment">//将string类转为字符串数组,返回给s1</span></span><br><span class="line"><span class="keyword">char</span> *s=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line">str.<span class="built_in">copy</span>(s,count,pos);    <span class="comment">//将str里的pos位置开始,拷贝count个字符,存到s里.</span></span><br></pre></td></tr></table></figure><h3 id="9-2-vector"><a href="#9-2-vector" class="headerlink" title="9.2 vector"></a>9.2 vector</h3><blockquote><p>使用vector容器，你需要包含vector头文件</p></blockquote><p>容器的创建：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//创建一个名字叫a的vector容器，装的是int类型数据，大小是10，每个容器的值都是1</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//也可以这样，只指定大小不设初值</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(b)</span></span>;</span><br><span class="line"><span class="comment">//也可以基于另一个vector&lt;int&gt;来创建新的vector&lt;int&gt;</span></span><br></pre></td></tr></table></figure><p>对于一个vector&lt;int&gt; a，常用的操作有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a[i]; <span class="comment">//返回a的第i个元素，当且仅当a[i]存在</span></span><br><span class="line">a.<span class="built_in">back</span>(); <span class="comment">//返回a的最后一个元素</span></span><br><span class="line">a.<span class="built_in">front</span>(); <span class="comment">//返回a的第一个元素</span></span><br><span class="line">a.<span class="built_in">clear</span>(); <span class="comment">//清空a中的元素</span></span><br><span class="line">a.<span class="built_in">empty</span>(); <span class="comment">//判断a是否为空，空则返回ture,不空则返回false</span></span><br><span class="line">a.<span class="built_in">size</span>(); <span class="comment">//返回a中元素的个数；</span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">5</span>); <span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">a.<span class="built_in">pop_back</span>(); <span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值随机</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="number">2</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值为2</span></span><br></pre></td></tr></table></figure><p>对于该容器的遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;a;</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it&lt;a.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用vector&lt;int&gt;::iterator定义一个vector&lt;int&gt;类型的迭代器变量it。it支持自加和自减操作，相当于访问后一个或者前一个元素。</p><p>vector的earse操作，传入的参数是一个迭代器，删除迭代器指向的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;a;</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it&lt;a.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(;it&lt;a.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line"><span class="keyword">if</span>(*it == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="built_in">erase</span>(it);</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it&lt;a.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：<br>1 4 6 3 7<br>7<br>1 4 6 7</p></blockquote><p>所以不难看出erase的用法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型：</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(iterator position)</span></span>;<span class="comment">//删除指定元素</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(iterator first, iterator last)</span></span>;<span class="comment">//删除指定范围内的元素</span></span><br><span class="line"><span class="comment">//返回值：指向删除元素(或范围)的下一个元素。</span></span><br></pre></td></tr></table></figure><p><b>误区：</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误示例</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    a[i]=i;</span><br></pre></td></tr></table></figure><p>下标访问仅可以访问和修改已有元素，在未初始化时，使用下标访问是错误的。</p><p>常用算法：</p><p>在#include&lt;algorithm&gt;后，你可以使用几个常用的算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); <span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); <span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1</span></span><br><span class="line"><span class="built_in">copy</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),b.<span class="built_in">begin</span>()+<span class="number">1</span>); <span class="comment">//把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开        始复制，覆盖掉原有元素</span></span><br><span class="line"><span class="built_in">find</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="number">10</span>); <span class="comment">//在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</span></span><br></pre></td></tr></table></figure><p>请注意，这不是类对象的方法，不要使用a.sort()这种形式调用它。</p><h2 id="10">10. 类及常用成员函数的定义，类的复合关系的应用</h2><p>在 C++ 中，类和类之间有两种基本关系：复合关系和继承关系。</p><p>复合关系也称为“has-a”关系或“有”的关系,即一个类以另一个类的对象作为成员变量。</p><p>这里就有了封闭类的定义：一个类的成员变量如果是另一个类的对象，就称之为“成员对象”。包含成员对象的类叫封闭类（enclosed class）。</p><p>下例中Line是封闭类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">Point</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line"><span class="built_in">Point</span>(Point&amp; c)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;x = c.x;</span><br><span class="line"><span class="keyword">this</span>-&gt;y = c.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Point: x= &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; y= &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point l,r;<span class="comment">//线的左右端点</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="built_in">Line</span>(Point a,Point b):<span class="built_in">l</span>(a),<span class="built_in">r</span>(b)&#123;</span><br><span class="line">length = <span class="built_in">sqrt</span>((l.x-r.x)*(l.x-r.x)+(l.y-r.y)*(l.y-r.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Line length = &quot;</span>&lt;&lt;length&lt;&lt;endl;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point lu,rd;<span class="comment">//使用左上角和右下角可以定义一个长方形 </span></span><br><span class="line"><span class="built_in">Rectangle</span>(Point a,Point b):<span class="built_in">lu</span>(a),<span class="built_in">rd</span>(b)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">0</span>,<span class="number">3</span>)</span>,<span class="title">p2</span><span class="params">(<span class="number">4</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">Line <span class="title">l1</span><span class="params">(p1,p2)</span></span>;</span><br><span class="line">cout&lt;&lt;l1.length&lt;&lt;endl;<span class="comment">//输出5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写封闭类时，注意包含的那个类成员的可访问性，如果将数据设为private，则可能需要额外设置get、set函数来读写相关值。</p><h2 id="11">11. 多态性的应用，要求用类图分析类及继承关系，要求抽象基类、动态多态性</h2><blockquote><p>面向对象三大特性是”封装、”多态”、”继承”</p></blockquote><p>在C++程序设计中，多态性是指用一个名字定义不同的函数，这些函数执行不同但又类似的操作，这样就可以用同一个函数名调用不同内容的函数。换言之，可以用同样的接口访问功能不同的函数，从而实现“一个接口，多种方法”。</p><p>在C++中，多态性的实现和联编（也称绑定）这一概念有关。一个源程序经过编译、链接，成为可执行文件的过程是把可执行代码联编（或称装配）在一起的过程。其中在运行之前就完成的联编成为静态联编（前期联编）；而在程序运行之时才完成的联编叫动态联编（后期联编）。</p><p>静态联编支持的多态性称为编译时多态性（静态多态性）。在C++中，编译时多态性是通过函数重载和模板实现的。利用函数重载机制，在调用同名函数时，编译系统会根据实参的具体情况确定索要调用的是哪个函数。</p><p>动态联编所支持的多态性称为运行时多态（动态多态）。在C++中，运行时多态性是通过虚函数来实现的。</p><p><b>如果不实现多态，不要把函数定义成虚函数。</b></p><p>对于纯虚函数，子类必须提供纯虚函数的个性化实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>&#123;</span></span><br><span class="line"><span class="comment">//车抽象类 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> wheel;<span class="comment">//轮子数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printwheel</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span><span class="keyword">virtual</span> Vehicle&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;wheel = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printwheel</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;the car has &quot;</span>&lt;&lt;wheel&lt;&lt;<span class="string">&quot; wheel(s)&quot;</span>&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span>:</span><span class="keyword">virtual</span> Vehicle&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Bike</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;wheel = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printwheel</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;the bike has &quot;</span>&lt;&lt;wheel&lt;&lt;<span class="string">&quot; wheel(s)&quot;</span>&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Vehicle* p = <span class="keyword">new</span> <span class="built_in">Car</span>(<span class="number">6</span>);</span><br><span class="line">p-&gt;<span class="built_in">printwheel</span>();<span class="comment">//the car has 6 wheel(s)</span></span><br><span class="line"><span class="function">Bike <span class="title">b</span><span class="params">(<span class="number">2</span>)</span> </span>;</span><br><span class="line">b.<span class="built_in">printwheel</span>();<span class="comment">//the bike has 2 wheel(s)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序Bike和Car继承自虚基类Vehicle，重写了输出轮子树目的方法。</p><p>类图的学习参阅此博客：<a href="https://blog.csdn.net/zhanghuaichao/article/details/52964463">https://blog.csdn.net/zhanghuaichao/article/details/52964463</a></p><p>markdown画图麻烦，不画了。</p><h2 id="12">12. 个人见到的一些琐碎知识点</h2><h3 id="12-1-友元"><a href="#12-1-友元" class="headerlink" title="12.1 友元"></a>12.1 友元</h3><p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p><p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。</p><p><b>友元函数没有this指针</b></p><p>友元的目的：<b>让一个类或函数去访问另一个类中的私有成员</b>，注意啊，不是互相访问。</p><h4 id="12-1-1-友元与运算符重载"><a href="#12-1-1-友元与运算符重载" class="headerlink" title="12.1.1 友元与运算符重载"></a>12.1.1 友元与运算符重载</h4><p>当重载友元函数时，将没有隐含的参数this指针。</p><p>对于双目运算符，友元函数有2个参数，对于单目运算符，友元函数有一个参数。但是，有些运行符不能重载为友元函数，它们是：=,(),[]和-＞。</p><p>对于&lt;&lt;和&gt;&gt;，我们需要把运算符重载函数声明为类的友元函数，这样我们就能不用创建对象而直接调用函数。</p><h4 id="12-1-2-多说两句运算符重载"><a href="#12-1-2-多说两句运算符重载" class="headerlink" title="12.1.2 多说两句运算符重载"></a>12.1.2 多说两句运算符重载</h4><p>单目运算符最好被重载为成员，双目运算符最好被重载为友元函数。但是，有的双目运算符还是重载为成员函数为好，例如，赋值运算符。因为，它如果被重载为友元函数，将会出现与赋值语义不一致的地方。 </p><p><b>重载函数调用运算符</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> ＜iostream.h＞</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">F::operator</span> <span class="params">()</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x+<span class="number">5</span>)*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">F f;</span><br><span class="line">cout＜＜<span class="built_in">f</span>(<span class="number">1.5</span>, <span class="number">2.2</span>)＜＜endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-put函数"><a href="#12-2-put函数" class="headerlink" title="12.2 put函数"></a>12.2 put函数</h3><blockquote><p>要使用这个函数，你需要#include&lt;iostream&gt;</p></blockquote><p>C++的ostream类有专用于输出单个字符的成员函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出字符a的示例</span></span><br><span class="line">cout.<span class="built_in">put</span>(‘a’);</span><br><span class="line">cout.<span class="built_in">put</span>(<span class="number">65</span> + <span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>同时，也可以输出转义字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout.<span class="built_in">put</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这已经可以输出了，因此下例是画蛇添足的行为，非常错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="built_in">put</span>(<span class="string">&#x27;A&#x27;</span>);<span class="comment">//错误示例</span></span><br></pre></td></tr></table></figure><h3 id="12-3-ASCII码"><a href="#12-3-ASCII码" class="headerlink" title="12.3 ASCII码"></a>12.3 ASCII码</h3><p>A是65，a是97</p><h3 id="12-4"><a href="#12-4" class="headerlink" title="12.4"></a>12.4</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
